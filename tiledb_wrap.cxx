/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>
#include <vector>
#include "tiledb.h"


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jstring jarg3, jint jarg4, jintArray jarg5, jintArray jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t **arg2 = (tiledb_dimension_t **) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_datatype_t arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  tiledb_dimension_t *pp2 = 0 ;
  jsize len5 ;
  jsize len6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  
  arg2 = &pp2;
  
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (tiledb_datatype_t)jarg4; 
  
  len5 = jenv->GetArrayLength(jarg5);
  //copies array from Java to C
  arg5 = jenv->GetIntArrayElements(jarg5, 0);
  
  
  len6 = jenv->GetArrayLength(jarg6);
  //copies array from Java to C
  arg6 = jenv->GetIntArrayElements(jarg6, 0);
  
  result = (int)tiledb_dimension_create(arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg2);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_dimension_t **)&cPtr = *arg2;
    jenv->SetLongField(jarg2, fid, cPtr);
  }
  {
    jenv->ReleaseIntArrayElements(jarg5, arg5, 0);
  }
  {
    jenv->ReleaseIntArrayElements(jarg6, arg6, 0);
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1coords(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)tiledb_coords();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1var_1num(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)tiledb_var_num();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1version(JNIEnv *jenv, jclass jcls, jintArray jarg1, jintArray jarg2, jintArray jarg3) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  jsize len1 ;
  jsize len2 ;
  jsize len3 ;
  
  (void)jenv;
  (void)jcls;
  
  len1 = jenv->GetArrayLength(jarg1);
  //copies array from Java to C
  arg1 = jenv->GetIntArrayElements(jarg1, 0);
  
  
  len2 = jenv->GetArrayLength(jarg2);
  //copies array from Java to C
  arg2 = jenv->GetIntArrayElements(jarg2, 0);
  
  
  len3 = jenv->GetArrayLength(jarg3);
  //copies array from Java to C
  arg3 = jenv->GetIntArrayElements(jarg3, 0);
  
  tiledb_version(arg1,arg2,arg3);
  {
    jenv->ReleaseIntArrayElements(jarg1, arg1, 0);
  }
  {
    jenv->ReleaseIntArrayElements(jarg2, arg2, 0);
  }
  {
    jenv->ReleaseIntArrayElements(jarg3, arg3, 0);
  }
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1t_1config_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->config_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1t_1config_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  result = (void *) ((arg1)->config_);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1t_1storage_1manager_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->storage_manager_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1t_1storage_1manager_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  result = (void *) ((arg1)->storage_manager_);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1t_1last_1error_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->last_error_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1t_1last_1error_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  result = (void *) ((arg1)->last_error_);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1t_1mtx_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->mtx_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1t_1mtx_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  result = (void *) ((arg1)->mtx_);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1t_1status_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_error_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->status_ = (void const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1t_1status_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_error_t **)&jarg1; 
  result = (void *) ((arg1)->status_);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1t_1errmsg_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_error_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->errmsg_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1t_1errmsg_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_error_t **)&jarg1; 
  result = (void *) ((arg1)->errmsg_);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1t_1attr_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_attribute_t *arg1 = (tiledb_attribute_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_attribute_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->attr_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1t_1attr_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_attribute_t *arg1 = (tiledb_attribute_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_attribute_t **)&jarg1; 
  result = (void *) ((arg1)->attr_);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1t_1array_1schema_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_array_schema_t *arg1 = (tiledb_array_schema_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_array_schema_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->array_schema_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1t_1array_1schema_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_array_schema_t *arg1 = (tiledb_array_schema_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_array_schema_t **)&jarg1; 
  result = (void *) ((arg1)->array_schema_);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1t_1dim_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_dimension_t *arg1 = (tiledb_dimension_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_dimension_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->dim_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1t_1dim_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_dimension_t *arg1 = (tiledb_dimension_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_dimension_t **)&jarg1; 
  result = (void *) ((arg1)->dim_);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1t_1domain_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_domain_t *arg1 = (tiledb_domain_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_domain_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->domain_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1t_1domain_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_domain_t *arg1 = (tiledb_domain_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_domain_t **)&jarg1; 
  result = (void *) ((arg1)->domain_);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1t_1query_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_query_t *arg1 = (tiledb_query_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_query_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->query_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1t_1query_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_query_t *arg1 = (tiledb_query_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_query_t **)&jarg1; 
  result = (void *) ((arg1)->query_);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1t_1kv_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_kv_t *arg1 = (tiledb_kv_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->kv_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1t_1kv_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_t *arg1 = (tiledb_kv_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_t **)&jarg1; 
  result = (void *) ((arg1)->kv_);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1t_1vfs_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_vfs_t *arg1 = (tiledb_vfs_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->vfs_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1t_1vfs_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_vfs_t *arg1 = (tiledb_vfs_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_t **)&jarg1; 
  result = (void *) ((arg1)->vfs_);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_test(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  tiledb_array_type_t *arg1 = (tiledb_array_type_t *) 0 ;
  tiledb_array_type_t pp1 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = &pp1;
  
  test(arg1);
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_array_type_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_array_type_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg1);
    cls = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_array_type_t;)V");
    jenv->CallVoidMethod(jarg1, mid, newObj);
  }
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_testt(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  tiledb_array_type_t *arg1 = (tiledb_array_type_t *) 0 ;
  tiledb_array_type_t pp1 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = &pp1;
  
  testt(arg1);
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_array_type_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_array_type_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg1);
    cls = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_array_type_t;)V");
    jenv->CallVoidMethod(jarg1, mid, newObj);
  }
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_printTest(JNIEnv *jenv, jclass jcls, jintArray jarg1) {
  int *arg1 = (int *) 0 ;
  jsize len1 ;
  
  (void)jenv;
  (void)jcls;
  
  len1 = jenv->GetArrayLength(jarg1);
  //copies array from Java to C
  arg1 = jenv->GetIntArrayElements(jarg1, 0);
  
  printTest(arg1);
  {
    jenv->ReleaseIntArrayElements(jarg1, arg1, 0);
  }
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1create(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jint jresult = 0 ;
  tiledb_config_t **arg1 = (tiledb_config_t **) 0 ;
  tiledb_config_t *pp1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = &pp1;
  
  result = (int)tiledb_config_create(arg1);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg1);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_config_t **)&cPtr = *arg1;
    jenv->SetLongField(jarg1, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  result = (int)tiledb_config_free(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_config_set(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1set_1from_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)tiledb_config_set_from_file(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1unset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)tiledb_config_unset(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1create(JNIEnv *jenv, jclass jcls, jobject jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t **arg1 = (tiledb_ctx_t **) 0 ;
  tiledb_config_t *arg2 = (tiledb_config_t *) 0 ;
  tiledb_ctx_t *pp1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  
  arg1 = &pp1;
  
  arg2 = *(tiledb_config_t **)&jarg2; 
  result = (int)tiledb_ctx_create(arg1,arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg1);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_ctx_t **)&cPtr = *arg1;
    jenv->SetLongField(jarg1, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  result = (int)tiledb_ctx_free(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1last(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_error_t **arg2 = (tiledb_error_t **) 0 ;
  tiledb_error_t *pp2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  
  arg2 = &pp2;
  
  result = (int)tiledb_error_last(arg1,arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg2);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_error_t **)&cPtr = *arg2;
    jenv->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_error_t *arg2 = (tiledb_error_t *) 0 ;
  char **arg3 = (char **) 0 ;
  char *ret3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_error_t **)&jarg2; 
  
  arg3 = &ret3;
  
  result = (int)tiledb_error_message(arg1,arg2,(char const **)arg3);
  jresult = (jint)result; 
  {
    jstring str = jenv->NewStringUTF(*arg3); 
    jenv->SetObjectArrayElement(jarg3,0, str);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_error_t *arg2 = (tiledb_error_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_error_t **)&jarg2; 
  result = (int)tiledb_error_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1group_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)tiledb_group_create(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jstring jarg3, jint jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t **arg2 = (tiledb_attribute_t **) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_datatype_t arg4 ;
  tiledb_attribute_t *pp2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  
  arg2 = &pp2;
  
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (tiledb_datatype_t)jarg4; 
  result = (int)tiledb_attribute_create(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg2);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_attribute_t **)&cPtr = *arg2;
    jenv->SetLongField(jarg2, fid, cPtr);
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  result = (int)tiledb_attribute_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1set_1compressor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  tiledb_compressor_t arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = (tiledb_compressor_t)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)tiledb_attribute_set_compressor(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1set_1cell_1val_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)tiledb_attribute_set_cell_val_num(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  char **arg3 = (char **) 0 ;
  char *ret3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  
  arg3 = &ret3;
  
  result = (int)tiledb_attribute_get_name(arg1,(tiledb_attribute_t const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  {
    jstring str = jenv->NewStringUTF(*arg3); 
    jenv->SetObjectArrayElement(jarg3,0, str);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  tiledb_datatype_t *arg3 = (tiledb_datatype_t *) 0 ;
  tiledb_datatype_t pp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  
  arg3 = &pp3;
  
  result = (int)tiledb_attribute_get_type(arg1,(tiledb_attribute_t const *)arg2,arg3);
  jresult = (jint)result; 
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_datatype_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_datatype_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg3);
    cls = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_datatype_t;)V");
    jenv->CallVoidMethod(jarg3, mid, newObj);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1get_1compressor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jintArray jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  tiledb_compressor_t *arg3 = (tiledb_compressor_t *) 0 ;
  int *arg4 = (int *) 0 ;
  tiledb_compressor_t pp3 ;
  jsize len4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  
  arg3 = &pp3;
  
  
  len4 = jenv->GetArrayLength(jarg4);
  //copies array from Java to C
  arg4 = jenv->GetIntArrayElements(jarg4, 0);
  
  result = (int)tiledb_attribute_get_compressor(arg1,(tiledb_attribute_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_compressor_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_compressor_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg3);
    cls = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_compressor_t;)V");
    jenv->CallVoidMethod(jarg3, mid, newObj);
  }
  {
    jenv->ReleaseIntArrayElements(jarg4, arg4, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1get_1cell_1val_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (int)tiledb_attribute_get_cell_val_num(arg1,(tiledb_attribute_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (int)tiledb_attribute_dump(arg1,(tiledb_attribute_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t **arg2 = (tiledb_domain_t **) 0 ;
  tiledb_domain_t *pp2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  
  arg2 = &pp2;
  
  result = (int)tiledb_domain_create(arg1,arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg2);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_domain_t **)&cPtr = *arg2;
    jenv->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  result = (int)tiledb_domain_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  tiledb_datatype_t *arg3 = (tiledb_datatype_t *) 0 ;
  tiledb_datatype_t pp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  
  arg3 = &pp3;
  
  result = (int)tiledb_domain_get_type(arg1,(tiledb_domain_t const *)arg2,arg3);
  jresult = (jint)result; 
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_datatype_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_datatype_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg3);
    cls = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_datatype_t;)V");
    jenv->CallVoidMethod(jarg3, mid, newObj);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1get_1rank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (int)tiledb_domain_get_rank(arg1,(tiledb_domain_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1add_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  tiledb_dimension_t *arg3 = (tiledb_dimension_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = *(tiledb_dimension_t **)&jarg3; 
  result = (int)tiledb_domain_add_dimension(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  unsigned int arg3 ;
  tiledb_dimension_t **arg4 = (tiledb_dimension_t **) 0 ;
  tiledb_dimension_t *pp4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  
  arg4 = &pp4;
  
  result = (int)tiledb_dimension_from_index(arg1,(tiledb_domain_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg4);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_dimension_t **)&cPtr = *arg4;
    jenv->SetLongField(jarg4, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jobject jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_dimension_t **arg4 = (tiledb_dimension_t **) 0 ;
  tiledb_dimension_t *pp4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  
  arg4 = &pp4;
  
  result = (int)tiledb_dimension_from_name(arg1,(tiledb_domain_t const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg4);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_dimension_t **)&cPtr = *arg4;
    jenv->SetLongField(jarg4, fid, cPtr);
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (int)tiledb_domain_dump(arg1,(tiledb_domain_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jstring jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t **arg2 = (tiledb_dimension_t **) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_datatype_t arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  tiledb_dimension_t *pp2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  
  arg2 = &pp2;
  
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (tiledb_datatype_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int)tiledb_dimension_create(arg1,arg2,(char const *)arg3,arg4,(void const *)arg5,(void const *)arg6);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg2);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_dimension_t **)&cPtr = *arg2;
    jenv->SetLongField(jarg2, fid, cPtr);
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  result = (int)tiledb_dimension_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  char **arg3 = (char **) 0 ;
  char *ret3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  
  arg3 = &ret3;
  
  result = (int)tiledb_dimension_get_name(arg1,(tiledb_dimension_t const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  {
    jstring str = jenv->NewStringUTF(*arg3); 
    jenv->SetObjectArrayElement(jarg3,0, str);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  tiledb_datatype_t *arg3 = (tiledb_datatype_t *) 0 ;
  tiledb_datatype_t pp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  
  arg3 = &pp3;
  
  result = (int)tiledb_dimension_get_type(arg1,(tiledb_dimension_t const *)arg2,arg3);
  jresult = (jint)result; 
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_datatype_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_datatype_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg3);
    cls = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_datatype_t;)V");
    jenv->CallVoidMethod(jarg3, mid, newObj);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1get_1domain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  void **arg3 = (void **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(void ***)&jarg3; 
  result = (int)tiledb_dimension_get_domain(arg1,(tiledb_dimension_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1get_1domain_1i(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  int **arg3 = (int **) 0 ;
  int *ret3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  
  arg3 = &ret3;
  
  result = (int)tiledb_dimension_get_domain_i(arg1,(tiledb_dimension_t const *)arg2,arg3);
  jresult = (jint)result; 
  {
    //jarg3 = jenv->NewIntArray(2);
    //jenv->SetIntArrayRegion(jarg3, 0 , 2, *arg3);
    jenv->ReleaseIntArrayElements(jarg3, *arg3, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1get_1tile_1extent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  void **arg3 = (void **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(void ***)&jarg3; 
  result = (int)tiledb_dimension_get_tile_extent(arg1,(tiledb_dimension_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (int)tiledb_dimension_dump(arg1,(tiledb_dimension_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t **arg2 = (tiledb_array_schema_t **) 0 ;
  tiledb_array_schema_t *pp2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  
  arg2 = &pp2;
  
  result = (int)tiledb_array_schema_create(arg1,arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg2);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_array_schema_t **)&cPtr = *arg2;
    jenv->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  result = (int)tiledb_array_schema_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1add_1attribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_attribute_t *arg3 = (tiledb_attribute_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_attribute_t **)&jarg3; 
  result = (int)tiledb_array_schema_add_attribute(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1set_1domain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_domain_t *arg3 = (tiledb_domain_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_domain_t **)&jarg3; 
  result = (int)tiledb_array_schema_set_domain(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1set_1as_1kv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  result = (int)tiledb_array_schema_set_as_kv(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1set_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  uint64_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int)tiledb_array_schema_set_capacity(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1set_1cell_1order(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_layout_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (tiledb_layout_t)jarg3; 
  result = (int)tiledb_array_schema_set_cell_order(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1set_1tile_1order(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_layout_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (tiledb_layout_t)jarg3; 
  result = (int)tiledb_array_schema_set_tile_order(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1set_1array_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_array_type_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (tiledb_array_type_t)jarg3; 
  result = (int)tiledb_array_schema_set_array_type(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1set_1coords_1compressor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_compressor_t arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (tiledb_compressor_t)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)tiledb_array_schema_set_coords_compressor(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1set_1offsets_1compressor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_compressor_t arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (tiledb_compressor_t)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)tiledb_array_schema_set_offsets_compressor(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  result = (int)tiledb_array_schema_check(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t **arg2 = (tiledb_array_schema_t **) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_array_schema_t *pp2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  
  arg2 = &pp2;
  
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_array_schema_load(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg2);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_array_schema_t **)&cPtr = *arg2;
    jenv->SetLongField(jarg2, fid, cPtr);
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1array_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_array_type_t *arg3 = (tiledb_array_type_t *) 0 ;
  tiledb_array_type_t pp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  
  arg3 = &pp3;
  
  result = (int)tiledb_array_schema_get_array_type(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_array_type_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_array_type_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg3);
    cls = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_array_type_t;)V");
    jenv->CallVoidMethod(jarg3, mid, newObj);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (int)tiledb_array_schema_get_capacity(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1cell_1order(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_layout_t *arg3 = (tiledb_layout_t *) 0 ;
  tiledb_layout_t pp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  
  arg3 = &pp3;
  
  result = (int)tiledb_array_schema_get_cell_order(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_layout_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_layout_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg3);
    cls = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_layout_t;)V");
    jenv->CallVoidMethod(jarg3, mid, newObj);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1coords_1compressor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jintArray jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_compressor_t *arg3 = (tiledb_compressor_t *) 0 ;
  int *arg4 = (int *) 0 ;
  tiledb_compressor_t pp3 ;
  jsize len4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  
  arg3 = &pp3;
  
  
  len4 = jenv->GetArrayLength(jarg4);
  //copies array from Java to C
  arg4 = jenv->GetIntArrayElements(jarg4, 0);
  
  result = (int)tiledb_array_schema_get_coords_compressor(arg1,(tiledb_array_schema_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_compressor_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_compressor_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg3);
    cls = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_compressor_t;)V");
    jenv->CallVoidMethod(jarg3, mid, newObj);
  }
  {
    jenv->ReleaseIntArrayElements(jarg4, arg4, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1offsets_1compressor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jintArray jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_compressor_t *arg3 = (tiledb_compressor_t *) 0 ;
  int *arg4 = (int *) 0 ;
  tiledb_compressor_t pp3 ;
  jsize len4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  
  arg3 = &pp3;
  
  
  len4 = jenv->GetArrayLength(jarg4);
  //copies array from Java to C
  arg4 = jenv->GetIntArrayElements(jarg4, 0);
  
  result = (int)tiledb_array_schema_get_offsets_compressor(arg1,(tiledb_array_schema_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_compressor_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_compressor_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg3);
    cls = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_compressor_t;)V");
    jenv->CallVoidMethod(jarg3, mid, newObj);
  }
  {
    jenv->ReleaseIntArrayElements(jarg4, arg4, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1domain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_domain_t **arg3 = (tiledb_domain_t **) 0 ;
  tiledb_domain_t *pp3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  
  arg3 = &pp3;
  
  result = (int)tiledb_array_schema_get_domain(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg3);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_domain_t **)&cPtr = *arg3;
    jenv->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1as_1kv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  int *arg3 = (int *) 0 ;
  jsize len3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  
  len3 = jenv->GetArrayLength(jarg3);
  //copies array from Java to C
  arg3 = jenv->GetIntArrayElements(jarg3, 0);
  
  result = (int)tiledb_array_schema_get_as_kv(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    jenv->ReleaseIntArrayElements(jarg3, arg3, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1tile_1order(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_layout_t *arg3 = (tiledb_layout_t *) 0 ;
  tiledb_layout_t pp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  
  arg3 = &pp3;
  
  result = (int)tiledb_array_schema_get_tile_order(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_layout_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_layout_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg3);
    cls = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_layout_t;)V");
    jenv->CallVoidMethod(jarg3, mid, newObj);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1num_1attributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (int)tiledb_array_schema_get_num_attributes(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  unsigned int arg3 ;
  tiledb_attribute_t **arg4 = (tiledb_attribute_t **) 0 ;
  tiledb_attribute_t *pp4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  
  arg4 = &pp4;
  
  result = (int)tiledb_attribute_from_index(arg1,(tiledb_array_schema_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg4);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_attribute_t **)&cPtr = *arg4;
    jenv->SetLongField(jarg4, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jobject jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_attribute_t **arg4 = (tiledb_attribute_t **) 0 ;
  tiledb_attribute_t *pp4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  
  arg4 = &pp4;
  
  result = (int)tiledb_attribute_from_name(arg1,(tiledb_array_schema_t const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg4);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_attribute_t **)&cPtr = *arg4;
    jenv->SetLongField(jarg4, fid, cPtr);
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (int)tiledb_array_schema_dump(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jstring jarg3, jint jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t **arg2 = (tiledb_query_t **) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_query_type_t arg4 ;
  tiledb_query_t *pp2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  
  arg2 = &pp2;
  
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (tiledb_query_type_t)jarg4; 
  result = (int)tiledb_query_create(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg2);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_query_t **)&cPtr = *arg2;
    jenv->SetLongField(jarg2, fid, cPtr);
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1set_1subarray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (int)tiledb_query_set_subarray(arg1,arg2,(void const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1set_1buffers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char **arg3 = (char **) 0 ;
  unsigned int arg4 ;
  void **arg5 = (void **) 0 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  char *ret3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  
  arg3 = &ret3;
  
  arg4 = (unsigned int)jarg4; 
  arg5 = *(void ***)&jarg5; 
  arg6 = *(uint64_t **)&jarg6; 
  result = (int)tiledb_query_set_buffers(arg1,arg2,(char const **)arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    jstring str = jenv->NewStringUTF(*arg3); 
    jenv->SetObjectArrayElement(jarg3,0, str);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1set_1layout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_layout_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = (tiledb_layout_t)jarg3; 
  result = (int)tiledb_query_set_layout(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  result = (int)tiledb_query_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1set_1kv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_kv_t *arg3 = (tiledb_kv_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(tiledb_kv_t **)&jarg3; 
  result = (int)tiledb_query_set_kv(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1set_1kv_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4, jobject jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  void *arg3 = (void *) 0 ;
  tiledb_datatype_t arg4 ;
  uint64_t arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (tiledb_datatype_t)jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int)tiledb_query_set_kv_key(arg1,arg2,(void const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1submit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  result = (int)tiledb_query_submit(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1submit_1async(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  void (*arg3)(void *) = (void (*)(void *)) 0 ;
  void *arg4 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(void (**)(void *))&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (int)tiledb_query_submit_async(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1reset_1buffers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  void **arg3 = (void **) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(void ***)&jarg3; 
  arg4 = *(uint64_t **)&jarg4; 
  result = (int)tiledb_query_reset_buffers(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1get_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_query_status_t *arg3 = (tiledb_query_status_t *) 0 ;
  tiledb_query_status_t pp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  
  arg3 = &pp3;
  
  result = (int)tiledb_query_get_status(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_query_status_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_query_status_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg3);
    cls = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_query_status_t;)V");
    jenv->CallVoidMethod(jarg3, mid, newObj);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1get_1attribute_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jobject jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_query_status_t *arg4 = (tiledb_query_status_t *) 0 ;
  tiledb_query_status_t pp4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  
  arg4 = &pp4;
  
  result = (int)tiledb_query_get_attribute_status(arg1,(tiledb_query_t const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_query_status_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_query_status_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg4);
    cls = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_query_status_t;)V");
    jenv->CallVoidMethod(jarg4, mid, newObj);
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_array_schema_t *arg3 = (tiledb_array_schema_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_array_schema_t **)&jarg3; 
  result = (int)tiledb_array_create(arg1,(char const *)arg2,(tiledb_array_schema_t const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1consolidate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)tiledb_array_consolidate(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1object_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_object_t *arg3 = (tiledb_object_t *) 0 ;
  tiledb_object_t pp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  arg3 = &pp3;
  
  result = (int)tiledb_object_type(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_object_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_object_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg3);
    cls = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_object_t;)V");
    jenv->CallVoidMethod(jarg3, mid, newObj);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1object_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)tiledb_object_remove(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1object_1move(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (int)tiledb_object_move(arg1,(char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1object_1walk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_walk_order_t arg3 ;
  int (*arg4)(char const *,tiledb_object_t,void *) = (int (*)(char const *,tiledb_object_t,void *)) 0 ;
  void *arg5 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (tiledb_walk_order_t)jarg3; 
  arg4 = *(int (**)(char const *,tiledb_object_t,void *))&jarg4; 
  arg5 = *(void **)&jarg5; 
  result = (int)tiledb_object_walk(arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1object_1ls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int (*arg3)(char const *,tiledb_object_t,void *) = (int (*)(char const *,tiledb_object_t,void *)) 0 ;
  void *arg4 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(int (**)(char const *,tiledb_object_t,void *))&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (int)tiledb_object_ls(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobjectArray jarg4, jobject jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t **arg2 = (tiledb_kv_t **) 0 ;
  unsigned int arg3 ;
  char **arg4 = (char **) 0 ;
  tiledb_datatype_t *arg5 = (tiledb_datatype_t *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  tiledb_kv_t *pp2 = 0 ;
  char *ret4 ;
  tiledb_datatype_t pp5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  
  arg2 = &pp2;
  
  arg3 = (unsigned int)jarg3; 
  
  arg4 = &ret4;
  
  
  arg5 = &pp5;
  
  arg6 = *(unsigned int **)&jarg6; 
  result = (int)tiledb_kv_create(arg1,arg2,arg3,(char const **)arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg2);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_kv_t **)&cPtr = *arg2;
    jenv->SetLongField(jarg2, fid, cPtr);
  }
  {
    jstring str = jenv->NewStringUTF(*arg4); 
    jenv->SetObjectArrayElement(jarg4,0, str);
  }
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_datatype_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_datatype_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg5);
    cls = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_datatype_t;)V");
    jenv->CallVoidMethod(jarg5, mid, newObj);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  result = (int)tiledb_kv_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1add_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4, jobject jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  void *arg3 = (void *) 0 ;
  tiledb_datatype_t arg4 ;
  uint64_t arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (tiledb_datatype_t)jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int)tiledb_kv_add_key(arg1,arg2,(void const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1add_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (int)tiledb_kv_add_value(arg1,arg2,arg3,(void const *)arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1add_1value_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  uint64_t arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(void **)&jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int)tiledb_kv_add_value_var(arg1,arg2,arg3,(void const *)arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1get_1key_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (int)tiledb_kv_get_key_num(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1get_1value_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  unsigned int arg3 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(uint64_t **)&jarg4; 
  result = (int)tiledb_kv_get_value_num(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1get_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jlong jarg4, jobject jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  uint64_t arg3 ;
  void **arg4 = (void **) 0 ;
  tiledb_datatype_t *arg5 = (tiledb_datatype_t *) 0 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  tiledb_datatype_t pp5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(void ***)&jarg4; 
  
  arg5 = &pp5;
  
  arg6 = *(uint64_t **)&jarg6; 
  result = (int)tiledb_kv_get_key(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    jclass cls = jenv->FindClass("io/tiledb/api/tiledb_datatype_t");
    jmethodID mid = jenv->GetStaticMethodID(cls, "swigToEnum", "(I)Lio/tiledb/api/tiledb_datatype_t;");
    jobject newObj = jenv->CallStaticObjectMethod(cls, mid, (jint)*arg5);
    cls = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(cls, "set", "(Lio/tiledb/api/tiledb_datatype_t;)V");
    jenv->CallVoidMethod(jarg5, mid, newObj);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1get_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  uint64_t arg3 ;
  unsigned int arg4 ;
  void **arg5 = (void **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = (unsigned int)jarg4; 
  arg5 = *(void ***)&jarg5; 
  result = (int)tiledb_kv_get_value(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1get_1value_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  uint64_t arg3 ;
  unsigned int arg4 ;
  void **arg5 = (void **) 0 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = (unsigned int)jarg4; 
  arg5 = *(void ***)&jarg5; 
  arg6 = *(uint64_t **)&jarg6; 
  result = (int)tiledb_kv_get_value_var(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1set_1buffer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  uint64_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int)tiledb_kv_set_buffer_size(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t **arg2 = (tiledb_vfs_t **) 0 ;
  tiledb_config_t *arg3 = (tiledb_config_t *) 0 ;
  tiledb_vfs_t *pp2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  
  arg2 = &pp2;
  
  arg3 = *(tiledb_config_t **)&jarg3; 
  result = (int)tiledb_vfs_create(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass cls = jenv->GetObjectClass(jarg2);
    jfieldID fid = jenv->GetFieldID(cls, "swigCPtr", "J");
    jlong cPtr = 0;
    *(tiledb_vfs_t **)&cPtr = *arg2;
    jenv->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  result = (int)tiledb_vfs_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1create_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_vfs_create_bucket(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1remove_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_vfs_remove_bucket(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1is_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jintArray jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  jsize len4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  
  len4 = jenv->GetArrayLength(jarg4);
  //copies array from Java to C
  arg4 = jenv->GetIntArrayElements(jarg4, 0);
  
  result = (int)tiledb_vfs_is_bucket(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  {
    jenv->ReleaseIntArrayElements(jarg4, arg4, 0);
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1create_1dir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_vfs_create_dir(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1is_1dir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jintArray jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  jsize len4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  
  len4 = jenv->GetArrayLength(jarg4);
  //copies array from Java to C
  arg4 = jenv->GetIntArrayElements(jarg4, 0);
  
  result = (int)tiledb_vfs_is_dir(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  {
    jenv->ReleaseIntArrayElements(jarg4, arg4, 0);
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1remove_1dir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_vfs_remove_dir(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1is_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jintArray jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  jsize len4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  
  len4 = jenv->GetArrayLength(jarg4);
  //copies array from Java to C
  arg4 = jenv->GetIntArrayElements(jarg4, 0);
  
  result = (int)tiledb_vfs_is_file(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  {
    jenv->ReleaseIntArrayElements(jarg4, arg4, 0);
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1remove_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_vfs_remove_file(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1file_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint64_t **)&jarg4; 
  result = (int)tiledb_vfs_file_size(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1move(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (int)tiledb_vfs_move(arg1,arg2,(char const *)arg3,(char const *)arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jobject jarg4, jlong jarg5, jobject jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t arg4 ;
  void *arg5 = (void *) 0 ;
  uint64_t arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(void **)&jarg5; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg6);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg6, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg6 = 0;
    if (sz > 0) {
      arg6 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg6 = (arg6 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int)tiledb_vfs_read(arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  uint64_t arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void **)&jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int)tiledb_vfs_write(arg1,arg2,(char const *)arg3,(void const *)arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1sync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_vfs_sync(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1supports_1fs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jintArray jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  tiledb_filesystem_t arg3 ;
  int *arg4 = (int *) 0 ;
  jsize len4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = (tiledb_filesystem_t)jarg3; 
  
  len4 = jenv->GetArrayLength(jarg4);
  //copies array from Java to C
  arg4 = jenv->GetIntArrayElements(jarg4, 0);
  
  result = (int)tiledb_vfs_supports_fs(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    jenv->ReleaseIntArrayElements(jarg4, arg4, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1touch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_vfs_touch(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1uri_1to_1path(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(unsigned int **)&jarg4; 
  result = (int)tiledb_uri_to_path(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


#ifdef __cplusplus
}
#endif

