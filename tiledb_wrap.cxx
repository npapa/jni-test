/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>
#include <vector>
#include "tiledb.h"
#include "tiledb_java_extensions.h"


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


typedef int intArray;

SWIGINTERN intArray *new_intArray(int nelements){
  return new int[nelements]();
}
SWIGINTERN void delete_intArray(intArray *self){
  delete [] self;
}
SWIGINTERN int intArray_getitem(intArray *self,int index){
  return self[index];
}
SWIGINTERN void intArray_setitem(intArray *self,int index,int value){
  self[index] = value;
}
SWIGINTERN int *intArray_cast(intArray *self){
  return self;
}
SWIGINTERN intArray *intArray_frompointer(int *t){
  return (intArray *) t;
}

typedef int32_t int32_tArray;

SWIGINTERN int32_tArray *new_int32_tArray(int nelements){
  return new int32_t[nelements]();
}
SWIGINTERN void delete_int32_tArray(int32_tArray *self){
  delete [] self;
}
SWIGINTERN int32_t int32_tArray_getitem(int32_tArray *self,int index){
  return self[index];
}
SWIGINTERN void int32_tArray_setitem(int32_tArray *self,int index,int32_t value){
  self[index] = value;
}
SWIGINTERN int32_t *int32_tArray_cast(int32_tArray *self){
  return self;
}
SWIGINTERN int32_tArray *int32_tArray_frompointer(int32_t *t){
  return (int32_tArray *) t;
}

typedef int64_t int64_tArray;

SWIGINTERN int64_tArray *new_int64_tArray(int nelements){
  return new int64_t[nelements]();
}
SWIGINTERN void delete_int64_tArray(int64_tArray *self){
  delete [] self;
}
SWIGINTERN int64_t int64_tArray_getitem(int64_tArray *self,int index){
  return self[index];
}
SWIGINTERN void int64_tArray_setitem(int64_tArray *self,int index,int64_t value){
  self[index] = value;
}
SWIGINTERN int64_t *int64_tArray_cast(int64_tArray *self){
  return self;
}
SWIGINTERN int64_tArray *int64_tArray_frompointer(int64_t *t){
  return (int64_tArray *) t;
}

typedef char charArray;

SWIGINTERN charArray *new_charArray(int nelements){
  return new char[nelements]();
}
SWIGINTERN void delete_charArray(charArray *self){
  delete [] self;
}
SWIGINTERN char charArray_getitem(charArray *self,int index){
  return self[index];
}
SWIGINTERN void charArray_setitem(charArray *self,int index,char value){
  self[index] = value;
}
SWIGINTERN char *charArray_cast(charArray *self){
  return self;
}
SWIGINTERN charArray *charArray_frompointer(char *t){
  return (charArray *) t;
}

typedef float floatArray;

SWIGINTERN floatArray *new_floatArray(int nelements){
  return new float[nelements]();
}
SWIGINTERN void delete_floatArray(floatArray *self){
  delete [] self;
}
SWIGINTERN float floatArray_getitem(floatArray *self,int index){
  return self[index];
}
SWIGINTERN void floatArray_setitem(floatArray *self,int index,float value){
  self[index] = value;
}
SWIGINTERN float *floatArray_cast(floatArray *self){
  return self;
}
SWIGINTERN floatArray *floatArray_frompointer(float *t){
  return (floatArray *) t;
}

typedef double doubleArray;

SWIGINTERN doubleArray *new_doubleArray(int nelements){
  return new double[nelements]();
}
SWIGINTERN void delete_doubleArray(doubleArray *self){
  delete [] self;
}
SWIGINTERN double doubleArray_getitem(doubleArray *self,int index){
  return self[index];
}
SWIGINTERN void doubleArray_setitem(doubleArray *self,int index,double value){
  self[index] = value;
}
SWIGINTERN double *doubleArray_cast(doubleArray *self){
  return self;
}
SWIGINTERN doubleArray *doubleArray_frompointer(double *t){
  return (doubleArray *) t;
}

typedef int8_t int8_tArray;

SWIGINTERN int8_tArray *new_int8_tArray(int nelements){
  return new int8_t[nelements]();
}
SWIGINTERN void delete_int8_tArray(int8_tArray *self){
  delete [] self;
}
SWIGINTERN int8_t int8_tArray_getitem(int8_tArray *self,int index){
  return self[index];
}
SWIGINTERN void int8_tArray_setitem(int8_tArray *self,int index,int8_t value){
  self[index] = value;
}
SWIGINTERN int8_t *int8_tArray_cast(int8_tArray *self){
  return self;
}
SWIGINTERN int8_tArray *int8_tArray_frompointer(int8_t *t){
  return (int8_tArray *) t;
}

typedef uint8_t uint8_tArray;

SWIGINTERN uint8_tArray *new_uint8_tArray(int nelements){
  return new uint8_t[nelements]();
}
SWIGINTERN void delete_uint8_tArray(uint8_tArray *self){
  delete [] self;
}
SWIGINTERN uint8_t uint8_tArray_getitem(uint8_tArray *self,int index){
  return self[index];
}
SWIGINTERN void uint8_tArray_setitem(uint8_tArray *self,int index,uint8_t value){
  self[index] = value;
}
SWIGINTERN uint8_t *uint8_tArray_cast(uint8_tArray *self){
  return self;
}
SWIGINTERN uint8_tArray *uint8_tArray_frompointer(uint8_t *t){
  return (uint8_tArray *) t;
}

typedef int16_t int16_tArray;

SWIGINTERN int16_tArray *new_int16_tArray(int nelements){
  return new int16_t[nelements]();
}
SWIGINTERN void delete_int16_tArray(int16_tArray *self){
  delete [] self;
}
SWIGINTERN int16_t int16_tArray_getitem(int16_tArray *self,int index){
  return self[index];
}
SWIGINTERN void int16_tArray_setitem(int16_tArray *self,int index,int16_t value){
  self[index] = value;
}
SWIGINTERN int16_t *int16_tArray_cast(int16_tArray *self){
  return self;
}
SWIGINTERN int16_tArray *int16_tArray_frompointer(int16_t *t){
  return (int16_tArray *) t;
}

typedef uint16_t uint16_tArray;

SWIGINTERN uint16_tArray *new_uint16_tArray(int nelements){
  return new uint16_t[nelements]();
}
SWIGINTERN void delete_uint16_tArray(uint16_tArray *self){
  delete [] self;
}
SWIGINTERN uint16_t uint16_tArray_getitem(uint16_tArray *self,int index){
  return self[index];
}
SWIGINTERN void uint16_tArray_setitem(uint16_tArray *self,int index,uint16_t value){
  self[index] = value;
}
SWIGINTERN uint16_t *uint16_tArray_cast(uint16_tArray *self){
  return self;
}
SWIGINTERN uint16_tArray *uint16_tArray_frompointer(uint16_t *t){
  return (uint16_tArray *) t;
}

typedef uint32_t uint32_tArray;

SWIGINTERN uint32_tArray *new_uint32_tArray(int nelements){
  return new uint32_t[nelements]();
}
SWIGINTERN void delete_uint32_tArray(uint32_tArray *self){
  delete [] self;
}
SWIGINTERN uint32_t uint32_tArray_getitem(uint32_tArray *self,int index){
  return self[index];
}
SWIGINTERN void uint32_tArray_setitem(uint32_tArray *self,int index,uint32_t value){
  self[index] = value;
}
SWIGINTERN uint32_t *uint32_tArray_cast(uint32_tArray *self){
  return self;
}
SWIGINTERN uint32_tArray *uint32_tArray_frompointer(uint32_t *t){
  return (uint32_tArray *) t;
}

typedef uint64_t uint64_tArray;

SWIGINTERN uint64_tArray *new_uint64_tArray(int nelements){
  return new uint64_t[nelements]();
}
SWIGINTERN void delete_uint64_tArray(uint64_tArray *self){
  delete [] self;
}
SWIGINTERN uint64_t uint64_tArray_getitem(uint64_tArray *self,int index){
  return self[index];
}
SWIGINTERN void uint64_tArray_setitem(uint64_tArray *self,int index,uint64_t value){
  self[index] = value;
}
SWIGINTERN uint64_t *uint64_tArray_cast(uint64_tArray *self){
  return self;
}
SWIGINTERN uint64_tArray *uint64_tArray_frompointer(uint64_t *t){
  return (uint64_tArray *) t;
}

static char * *new_charpArray(int nelements) { 
  return new char *[nelements](); 
}

static void delete_charpArray(char * *ary) { 
  delete [] ary; 
}

static char * charpArray_getitem(char * *ary, int index) {
    return ary[index];
}
static void charpArray_setitem(char * *ary, int index, char * value) {
  ary[index]= new char[sizeof(value)];
  strcpy(ary[index], value);
}




static void * *new_voidpArray(int nelements) { 
  return new void *[nelements](); 
}

static void delete_voidpArray(void * *ary) { 
  delete [] ary; 
}

static void * voidpArray_getitem(void * *ary, int index) {
    return ary[index];
}
static void voidpArray_setitem(void * *ary, int index, void * value) {
    ary[index] = value;
}


static int *new_intp() { 
  return new int(); 
}

static int *copy_intp(int value) { 
  return new int(value); 
}

static void delete_intp(int *obj) { 
  if (obj) delete obj; 
}

static void intp_assign(int *obj, int value) {
  *obj = value;
}

static int intp_value(int *obj) {
  return *obj;
}


static float *new_floatp() { 
  return new float(); 
}

static float *copy_floatp(float value) { 
  return new float(value); 
}

static void delete_floatp(float *obj) { 
  if (obj) delete obj; 
}

static void floatp_assign(float *obj, float value) {
  *obj = value;
}

static float floatp_value(float *obj) {
  return *obj;
}


static int * *new_intpp() { 
  return new int *(); 
}

static int * *copy_intpp(int * value) { 
  return new int *(value); 
}

static void delete_intpp(int * *obj) { 
  if (obj) delete obj; 
}

static void intpp_assign(int * *obj, int * value) {
  *obj = value;
}

static int * intpp_value(int * *obj) {
  return *obj;
}


static char * *new_charpp() { 
  return new char *(); 
}

static char * *copy_charpp(char * value) { 
  return new char *(value); 
}

static void delete_charpp(char * *obj) { 
  if (obj) delete obj; 
}

static void charpp_assign(char * *obj, char * value) {
  *obj = value;
}

static char * charpp_value(char * *obj) {
  return *obj;
}


static unsigned int *new_uintp() { 
  return new unsigned int(); 
}

static unsigned int *copy_uintp(unsigned int value) { 
  return new unsigned int(value); 
}

static void delete_uintp(unsigned int *obj) { 
  if (obj) delete obj; 
}

static void uintp_assign(unsigned int *obj, unsigned int value) {
  *obj = value;
}

static unsigned int uintp_value(unsigned int *obj) {
  return *obj;
}


static unsigned long long *new_ullp() { 
  return new unsigned long long(); 
}

static unsigned long long *copy_ullp(unsigned long long value) { 
  return new unsigned long long(value); 
}

static void delete_ullp(unsigned long long *obj) { 
  if (obj) delete obj; 
}

static void ullp_assign(unsigned long long *obj, unsigned long long value) {
  *obj = value;
}

static unsigned long long ullp_value(unsigned long long *obj) {
  return *obj;
}


static tiledb_config_t *new_tiledb_config_tp() { 
  return new tiledb_config_t(); 
}

static tiledb_config_t *copy_tiledb_config_tp(tiledb_config_t value) { 
  return new tiledb_config_t(value); 
}

static void delete_tiledb_config_tp(tiledb_config_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_config_tp_assign(tiledb_config_t *obj, tiledb_config_t value) {
  *obj = value;
}

static tiledb_config_t tiledb_config_tp_value(tiledb_config_t *obj) {
  return *obj;
}


static tiledb_config_t * *new_tiledb_config_tpp() { 
  return new tiledb_config_t *(); 
}

static tiledb_config_t * *copy_tiledb_config_tpp(tiledb_config_t * value) { 
  return new tiledb_config_t *(value); 
}

static void delete_tiledb_config_tpp(tiledb_config_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_config_tpp_assign(tiledb_config_t * *obj, tiledb_config_t * value) {
  *obj = value;
}

static tiledb_config_t * tiledb_config_tpp_value(tiledb_config_t * *obj) {
  return *obj;
}


static tiledb_config_iter_t *new_tiledb_config_iter_tp() { 
  return new tiledb_config_iter_t(); 
}

static tiledb_config_iter_t *copy_tiledb_config_iter_tp(tiledb_config_iter_t value) { 
  return new tiledb_config_iter_t(value); 
}

static void delete_tiledb_config_iter_tp(tiledb_config_iter_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_config_iter_tp_assign(tiledb_config_iter_t *obj, tiledb_config_iter_t value) {
  *obj = value;
}

static tiledb_config_iter_t tiledb_config_iter_tp_value(tiledb_config_iter_t *obj) {
  return *obj;
}


static tiledb_config_iter_t * *new_tiledb_config_iter_tpp() { 
  return new tiledb_config_iter_t *(); 
}

static tiledb_config_iter_t * *copy_tiledb_config_iter_tpp(tiledb_config_iter_t * value) { 
  return new tiledb_config_iter_t *(value); 
}

static void delete_tiledb_config_iter_tpp(tiledb_config_iter_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_config_iter_tpp_assign(tiledb_config_iter_t * *obj, tiledb_config_iter_t * value) {
  *obj = value;
}

static tiledb_config_iter_t * tiledb_config_iter_tpp_value(tiledb_config_iter_t * *obj) {
  return *obj;
}


static tiledb_ctx_t *new_tiledb_ctx_tp() { 
  return new tiledb_ctx_t(); 
}

static tiledb_ctx_t *copy_tiledb_ctx_tp(tiledb_ctx_t value) { 
  return new tiledb_ctx_t(value); 
}

static void delete_tiledb_ctx_tp(tiledb_ctx_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_ctx_tp_assign(tiledb_ctx_t *obj, tiledb_ctx_t value) {
  *obj = value;
}

static tiledb_ctx_t tiledb_ctx_tp_value(tiledb_ctx_t *obj) {
  return *obj;
}


static tiledb_ctx_t * *new_tiledb_ctx_tpp() { 
  return new tiledb_ctx_t *(); 
}

static tiledb_ctx_t * *copy_tiledb_ctx_tpp(tiledb_ctx_t * value) { 
  return new tiledb_ctx_t *(value); 
}

static void delete_tiledb_ctx_tpp(tiledb_ctx_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_ctx_tpp_assign(tiledb_ctx_t * *obj, tiledb_ctx_t * value) {
  *obj = value;
}

static tiledb_ctx_t * tiledb_ctx_tpp_value(tiledb_ctx_t * *obj) {
  return *obj;
}


static tiledb_error_t *new_tiledb_error_tp() { 
  return new tiledb_error_t(); 
}

static tiledb_error_t *copy_tiledb_error_tp(tiledb_error_t value) { 
  return new tiledb_error_t(value); 
}

static void delete_tiledb_error_tp(tiledb_error_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_error_tp_assign(tiledb_error_t *obj, tiledb_error_t value) {
  *obj = value;
}

static tiledb_error_t tiledb_error_tp_value(tiledb_error_t *obj) {
  return *obj;
}


static tiledb_error_t * *new_tiledb_error_tpp() { 
  return new tiledb_error_t *(); 
}

static tiledb_error_t * *copy_tiledb_error_tpp(tiledb_error_t * value) { 
  return new tiledb_error_t *(value); 
}

static void delete_tiledb_error_tpp(tiledb_error_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_error_tpp_assign(tiledb_error_t * *obj, tiledb_error_t * value) {
  *obj = value;
}

static tiledb_error_t * tiledb_error_tpp_value(tiledb_error_t * *obj) {
  return *obj;
}


static tiledb_attribute_t *new_tiledb_attribute_tp() { 
  return new tiledb_attribute_t(); 
}

static tiledb_attribute_t *copy_tiledb_attribute_tp(tiledb_attribute_t value) { 
  return new tiledb_attribute_t(value); 
}

static void delete_tiledb_attribute_tp(tiledb_attribute_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_attribute_tp_assign(tiledb_attribute_t *obj, tiledb_attribute_t value) {
  *obj = value;
}

static tiledb_attribute_t tiledb_attribute_tp_value(tiledb_attribute_t *obj) {
  return *obj;
}


static tiledb_attribute_t * *new_tiledb_attribute_tpp() { 
  return new tiledb_attribute_t *(); 
}

static tiledb_attribute_t * *copy_tiledb_attribute_tpp(tiledb_attribute_t * value) { 
  return new tiledb_attribute_t *(value); 
}

static void delete_tiledb_attribute_tpp(tiledb_attribute_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_attribute_tpp_assign(tiledb_attribute_t * *obj, tiledb_attribute_t * value) {
  *obj = value;
}

static tiledb_attribute_t * tiledb_attribute_tpp_value(tiledb_attribute_t * *obj) {
  return *obj;
}


static tiledb_array_schema_t *new_tiledb_array_schema_tp() { 
  return new tiledb_array_schema_t(); 
}

static tiledb_array_schema_t *copy_tiledb_array_schema_tp(tiledb_array_schema_t value) { 
  return new tiledb_array_schema_t(value); 
}

static void delete_tiledb_array_schema_tp(tiledb_array_schema_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_array_schema_tp_assign(tiledb_array_schema_t *obj, tiledb_array_schema_t value) {
  *obj = value;
}

static tiledb_array_schema_t tiledb_array_schema_tp_value(tiledb_array_schema_t *obj) {
  return *obj;
}


static tiledb_array_schema_t * *new_tiledb_array_schema_tpp() { 
  return new tiledb_array_schema_t *(); 
}

static tiledb_array_schema_t * *copy_tiledb_array_schema_tpp(tiledb_array_schema_t * value) { 
  return new tiledb_array_schema_t *(value); 
}

static void delete_tiledb_array_schema_tpp(tiledb_array_schema_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_array_schema_tpp_assign(tiledb_array_schema_t * *obj, tiledb_array_schema_t * value) {
  *obj = value;
}

static tiledb_array_schema_t * tiledb_array_schema_tpp_value(tiledb_array_schema_t * *obj) {
  return *obj;
}


static tiledb_dimension_t *new_tiledb_dimension_tp() { 
  return new tiledb_dimension_t(); 
}

static tiledb_dimension_t *copy_tiledb_dimension_tp(tiledb_dimension_t value) { 
  return new tiledb_dimension_t(value); 
}

static void delete_tiledb_dimension_tp(tiledb_dimension_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_dimension_tp_assign(tiledb_dimension_t *obj, tiledb_dimension_t value) {
  *obj = value;
}

static tiledb_dimension_t tiledb_dimension_tp_value(tiledb_dimension_t *obj) {
  return *obj;
}


static tiledb_dimension_t * *new_tiledb_dimension_tpp() { 
  return new tiledb_dimension_t *(); 
}

static tiledb_dimension_t * *copy_tiledb_dimension_tpp(tiledb_dimension_t * value) { 
  return new tiledb_dimension_t *(value); 
}

static void delete_tiledb_dimension_tpp(tiledb_dimension_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_dimension_tpp_assign(tiledb_dimension_t * *obj, tiledb_dimension_t * value) {
  *obj = value;
}

static tiledb_dimension_t * tiledb_dimension_tpp_value(tiledb_dimension_t * *obj) {
  return *obj;
}


static tiledb_domain_t *new_tiledb_domain_tp() { 
  return new tiledb_domain_t(); 
}

static tiledb_domain_t *copy_tiledb_domain_tp(tiledb_domain_t value) { 
  return new tiledb_domain_t(value); 
}

static void delete_tiledb_domain_tp(tiledb_domain_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_domain_tp_assign(tiledb_domain_t *obj, tiledb_domain_t value) {
  *obj = value;
}

static tiledb_domain_t tiledb_domain_tp_value(tiledb_domain_t *obj) {
  return *obj;
}


static tiledb_domain_t * *new_tiledb_domain_tpp() { 
  return new tiledb_domain_t *(); 
}

static tiledb_domain_t * *copy_tiledb_domain_tpp(tiledb_domain_t * value) { 
  return new tiledb_domain_t *(value); 
}

static void delete_tiledb_domain_tpp(tiledb_domain_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_domain_tpp_assign(tiledb_domain_t * *obj, tiledb_domain_t * value) {
  *obj = value;
}

static tiledb_domain_t * tiledb_domain_tpp_value(tiledb_domain_t * *obj) {
  return *obj;
}


static tiledb_query_t *new_tiledb_query_tp() { 
  return new tiledb_query_t(); 
}

static tiledb_query_t *copy_tiledb_query_tp(tiledb_query_t value) { 
  return new tiledb_query_t(value); 
}

static void delete_tiledb_query_tp(tiledb_query_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_query_tp_assign(tiledb_query_t *obj, tiledb_query_t value) {
  *obj = value;
}

static tiledb_query_t tiledb_query_tp_value(tiledb_query_t *obj) {
  return *obj;
}


static tiledb_query_t * *new_tiledb_query_tpp() { 
  return new tiledb_query_t *(); 
}

static tiledb_query_t * *copy_tiledb_query_tpp(tiledb_query_t * value) { 
  return new tiledb_query_t *(value); 
}

static void delete_tiledb_query_tpp(tiledb_query_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_query_tpp_assign(tiledb_query_t * *obj, tiledb_query_t * value) {
  *obj = value;
}

static tiledb_query_t * tiledb_query_tpp_value(tiledb_query_t * *obj) {
  return *obj;
}


static tiledb_kv_schema_t *new_tiledb_kv_schema_tp() { 
  return new tiledb_kv_schema_t(); 
}

static tiledb_kv_schema_t *copy_tiledb_kv_schema_tp(tiledb_kv_schema_t value) { 
  return new tiledb_kv_schema_t(value); 
}

static void delete_tiledb_kv_schema_tp(tiledb_kv_schema_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_kv_schema_tp_assign(tiledb_kv_schema_t *obj, tiledb_kv_schema_t value) {
  *obj = value;
}

static tiledb_kv_schema_t tiledb_kv_schema_tp_value(tiledb_kv_schema_t *obj) {
  return *obj;
}


static tiledb_kv_schema_t * *new_tiledb_kv_schema_tpp() { 
  return new tiledb_kv_schema_t *(); 
}

static tiledb_kv_schema_t * *copy_tiledb_kv_schema_tpp(tiledb_kv_schema_t * value) { 
  return new tiledb_kv_schema_t *(value); 
}

static void delete_tiledb_kv_schema_tpp(tiledb_kv_schema_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_kv_schema_tpp_assign(tiledb_kv_schema_t * *obj, tiledb_kv_schema_t * value) {
  *obj = value;
}

static tiledb_kv_schema_t * tiledb_kv_schema_tpp_value(tiledb_kv_schema_t * *obj) {
  return *obj;
}


static tiledb_kv_t *new_tiledb_kv_tp() { 
  return new tiledb_kv_t(); 
}

static tiledb_kv_t *copy_tiledb_kv_tp(tiledb_kv_t value) { 
  return new tiledb_kv_t(value); 
}

static void delete_tiledb_kv_tp(tiledb_kv_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_kv_tp_assign(tiledb_kv_t *obj, tiledb_kv_t value) {
  *obj = value;
}

static tiledb_kv_t tiledb_kv_tp_value(tiledb_kv_t *obj) {
  return *obj;
}


static tiledb_kv_t * *new_tiledb_kv_tpp() { 
  return new tiledb_kv_t *(); 
}

static tiledb_kv_t * *copy_tiledb_kv_tpp(tiledb_kv_t * value) { 
  return new tiledb_kv_t *(value); 
}

static void delete_tiledb_kv_tpp(tiledb_kv_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_kv_tpp_assign(tiledb_kv_t * *obj, tiledb_kv_t * value) {
  *obj = value;
}

static tiledb_kv_t * tiledb_kv_tpp_value(tiledb_kv_t * *obj) {
  return *obj;
}


static tiledb_kv_item_t *new_tiledb_kv_item_tp() { 
  return new tiledb_kv_item_t(); 
}

static tiledb_kv_item_t *copy_tiledb_kv_item_tp(tiledb_kv_item_t value) { 
  return new tiledb_kv_item_t(value); 
}

static void delete_tiledb_kv_item_tp(tiledb_kv_item_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_kv_item_tp_assign(tiledb_kv_item_t *obj, tiledb_kv_item_t value) {
  *obj = value;
}

static tiledb_kv_item_t tiledb_kv_item_tp_value(tiledb_kv_item_t *obj) {
  return *obj;
}


static tiledb_kv_item_t * *new_tiledb_kv_item_tpp() { 
  return new tiledb_kv_item_t *(); 
}

static tiledb_kv_item_t * *copy_tiledb_kv_item_tpp(tiledb_kv_item_t * value) { 
  return new tiledb_kv_item_t *(value); 
}

static void delete_tiledb_kv_item_tpp(tiledb_kv_item_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_kv_item_tpp_assign(tiledb_kv_item_t * *obj, tiledb_kv_item_t * value) {
  *obj = value;
}

static tiledb_kv_item_t * tiledb_kv_item_tpp_value(tiledb_kv_item_t * *obj) {
  return *obj;
}


static tiledb_kv_iter_t *new_tiledb_kv_iter_tp() { 
  return new tiledb_kv_iter_t(); 
}

static tiledb_kv_iter_t *copy_tiledb_kv_iter_tp(tiledb_kv_iter_t value) { 
  return new tiledb_kv_iter_t(value); 
}

static void delete_tiledb_kv_iter_tp(tiledb_kv_iter_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_kv_iter_tp_assign(tiledb_kv_iter_t *obj, tiledb_kv_iter_t value) {
  *obj = value;
}

static tiledb_kv_iter_t tiledb_kv_iter_tp_value(tiledb_kv_iter_t *obj) {
  return *obj;
}


static tiledb_kv_iter_t * *new_tiledb_kv_iter_tpp() { 
  return new tiledb_kv_iter_t *(); 
}

static tiledb_kv_iter_t * *copy_tiledb_kv_iter_tpp(tiledb_kv_iter_t * value) { 
  return new tiledb_kv_iter_t *(value); 
}

static void delete_tiledb_kv_iter_tpp(tiledb_kv_iter_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_kv_iter_tpp_assign(tiledb_kv_iter_t * *obj, tiledb_kv_iter_t * value) {
  *obj = value;
}

static tiledb_kv_iter_t * tiledb_kv_iter_tpp_value(tiledb_kv_iter_t * *obj) {
  return *obj;
}


static tiledb_vfs_t *new_tiledb_vfs_tp() { 
  return new tiledb_vfs_t(); 
}

static tiledb_vfs_t *copy_tiledb_vfs_tp(tiledb_vfs_t value) { 
  return new tiledb_vfs_t(value); 
}

static void delete_tiledb_vfs_tp(tiledb_vfs_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_vfs_tp_assign(tiledb_vfs_t *obj, tiledb_vfs_t value) {
  *obj = value;
}

static tiledb_vfs_t tiledb_vfs_tp_value(tiledb_vfs_t *obj) {
  return *obj;
}


static tiledb_vfs_t * *new_tiledb_vfs_tpp() { 
  return new tiledb_vfs_t *(); 
}

static tiledb_vfs_t * *copy_tiledb_vfs_tpp(tiledb_vfs_t * value) { 
  return new tiledb_vfs_t *(value); 
}

static void delete_tiledb_vfs_tpp(tiledb_vfs_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_vfs_tpp_assign(tiledb_vfs_t * *obj, tiledb_vfs_t * value) {
  *obj = value;
}

static tiledb_vfs_t * tiledb_vfs_tpp_value(tiledb_vfs_t * *obj) {
  return *obj;
}


static tiledb_vfs_fh_t *new_tiledb_vfs_fh_tp() { 
  return new tiledb_vfs_fh_t(); 
}

static tiledb_vfs_fh_t *copy_tiledb_vfs_fh_tp(tiledb_vfs_fh_t value) { 
  return new tiledb_vfs_fh_t(value); 
}

static void delete_tiledb_vfs_fh_tp(tiledb_vfs_fh_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_vfs_fh_tp_assign(tiledb_vfs_fh_t *obj, tiledb_vfs_fh_t value) {
  *obj = value;
}

static tiledb_vfs_fh_t tiledb_vfs_fh_tp_value(tiledb_vfs_fh_t *obj) {
  return *obj;
}


static tiledb_vfs_fh_t * *new_tiledb_vfs_fh_tpp() { 
  return new tiledb_vfs_fh_t *(); 
}

static tiledb_vfs_fh_t * *copy_tiledb_vfs_fh_tpp(tiledb_vfs_fh_t * value) { 
  return new tiledb_vfs_fh_t *(value); 
}

static void delete_tiledb_vfs_fh_tpp(tiledb_vfs_fh_t * *obj) { 
  if (obj) delete obj; 
}

static void tiledb_vfs_fh_tpp_assign(tiledb_vfs_fh_t * *obj, tiledb_vfs_fh_t * value) {
  *obj = value;
}

static tiledb_vfs_fh_t * tiledb_vfs_fh_tpp_value(tiledb_vfs_fh_t * *obj) {
  return *obj;
}


static tiledb_object_t *new_tiledb_object_tp() { 
  return new tiledb_object_t(); 
}

static tiledb_object_t *copy_tiledb_object_tp(tiledb_object_t value) { 
  return new tiledb_object_t(value); 
}

static void delete_tiledb_object_tp(tiledb_object_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_object_tp_assign(tiledb_object_t *obj, tiledb_object_t value) {
  *obj = value;
}

static tiledb_object_t tiledb_object_tp_value(tiledb_object_t *obj) {
  return *obj;
}


static tiledb_query_type_t *new_tiledb_query_type_tp() { 
  return new tiledb_query_type_t(); 
}

static tiledb_query_type_t *copy_tiledb_query_type_tp(tiledb_query_type_t value) { 
  return new tiledb_query_type_t(value); 
}

static void delete_tiledb_query_type_tp(tiledb_query_type_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_query_type_tp_assign(tiledb_query_type_t *obj, tiledb_query_type_t value) {
  *obj = value;
}

static tiledb_query_type_t tiledb_query_type_tp_value(tiledb_query_type_t *obj) {
  return *obj;
}


static tiledb_query_status_t *new_tiledb_query_status_tp() { 
  return new tiledb_query_status_t(); 
}

static tiledb_query_status_t *copy_tiledb_query_status_tp(tiledb_query_status_t value) { 
  return new tiledb_query_status_t(value); 
}

static void delete_tiledb_query_status_tp(tiledb_query_status_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_query_status_tp_assign(tiledb_query_status_t *obj, tiledb_query_status_t value) {
  *obj = value;
}

static tiledb_query_status_t tiledb_query_status_tp_value(tiledb_query_status_t *obj) {
  return *obj;
}


static tiledb_filesystem_t *new_tiledb_filesystem_tp() { 
  return new tiledb_filesystem_t(); 
}

static tiledb_filesystem_t *copy_tiledb_filesystem_tp(tiledb_filesystem_t value) { 
  return new tiledb_filesystem_t(value); 
}

static void delete_tiledb_filesystem_tp(tiledb_filesystem_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_filesystem_tp_assign(tiledb_filesystem_t *obj, tiledb_filesystem_t value) {
  *obj = value;
}

static tiledb_filesystem_t tiledb_filesystem_tp_value(tiledb_filesystem_t *obj) {
  return *obj;
}


static tiledb_datatype_t *new_tiledb_datatype_tp() { 
  return new tiledb_datatype_t(); 
}

static tiledb_datatype_t *copy_tiledb_datatype_tp(tiledb_datatype_t value) { 
  return new tiledb_datatype_t(value); 
}

static void delete_tiledb_datatype_tp(tiledb_datatype_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_datatype_tp_assign(tiledb_datatype_t *obj, tiledb_datatype_t value) {
  *obj = value;
}

static tiledb_datatype_t tiledb_datatype_tp_value(tiledb_datatype_t *obj) {
  return *obj;
}


static tiledb_array_type_t *new_tiledb_array_type_tp() { 
  return new tiledb_array_type_t(); 
}

static tiledb_array_type_t *copy_tiledb_array_type_tp(tiledb_array_type_t value) { 
  return new tiledb_array_type_t(value); 
}

static void delete_tiledb_array_type_tp(tiledb_array_type_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_array_type_tp_assign(tiledb_array_type_t *obj, tiledb_array_type_t value) {
  *obj = value;
}

static tiledb_array_type_t tiledb_array_type_tp_value(tiledb_array_type_t *obj) {
  return *obj;
}


static tiledb_layout_t *new_tiledb_layout_tp() { 
  return new tiledb_layout_t(); 
}

static tiledb_layout_t *copy_tiledb_layout_tp(tiledb_layout_t value) { 
  return new tiledb_layout_t(value); 
}

static void delete_tiledb_layout_tp(tiledb_layout_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_layout_tp_assign(tiledb_layout_t *obj, tiledb_layout_t value) {
  *obj = value;
}

static tiledb_layout_t tiledb_layout_tp_value(tiledb_layout_t *obj) {
  return *obj;
}


static tiledb_compressor_t *new_tiledb_compressor_tp() { 
  return new tiledb_compressor_t(); 
}

static tiledb_compressor_t *copy_tiledb_compressor_tp(tiledb_compressor_t value) { 
  return new tiledb_compressor_t(value); 
}

static void delete_tiledb_compressor_tp(tiledb_compressor_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_compressor_tp_assign(tiledb_compressor_t *obj, tiledb_compressor_t value) {
  *obj = value;
}

static tiledb_compressor_t tiledb_compressor_tp_value(tiledb_compressor_t *obj) {
  return *obj;
}


static tiledb_walk_order_t *new_tiledb_walk_order_tp() { 
  return new tiledb_walk_order_t(); 
}

static tiledb_walk_order_t *copy_tiledb_walk_order_tp(tiledb_walk_order_t value) { 
  return new tiledb_walk_order_t(value); 
}

static void delete_tiledb_walk_order_tp(tiledb_walk_order_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_walk_order_tp_assign(tiledb_walk_order_t *obj, tiledb_walk_order_t value) {
  *obj = value;
}

static tiledb_walk_order_t tiledb_walk_order_tp_value(tiledb_walk_order_t *obj) {
  return *obj;
}


static tiledb_vfs_mode_t *new_tiledb_vfs_mode_tp() { 
  return new tiledb_vfs_mode_t(); 
}

static tiledb_vfs_mode_t *copy_tiledb_vfs_mode_tp(tiledb_vfs_mode_t value) { 
  return new tiledb_vfs_mode_t(value); 
}

static void delete_tiledb_vfs_mode_tp(tiledb_vfs_mode_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_vfs_mode_tp_assign(tiledb_vfs_mode_t *obj, tiledb_vfs_mode_t value) {
  *obj = value;
}

static tiledb_vfs_mode_t tiledb_vfs_mode_tp_value(tiledb_vfs_mode_t *obj) {
  return *obj;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1intArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  intArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (intArray *)new_intArray(arg1);
  *(intArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1intArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  intArray *arg1 = (intArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(intArray **)&jarg1; 
  delete_intArray(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_intArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  intArray *arg1 = (intArray *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(intArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)intArray_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_intArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  intArray *arg1 = (intArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(intArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  intArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_intArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  intArray *arg1 = (intArray *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(intArray **)&jarg1; 
  result = (int *)intArray_cast(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_intArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int *arg1 = (int *) 0 ;
  intArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (intArray *)intArray_frompointer(arg1);
  *(intArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1int32_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int32_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int32_tArray *)new_int32_tArray(arg1);
  *(int32_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1int32_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int32_tArray *arg1 = (int32_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int32_tArray **)&jarg1; 
  delete_int32_tArray(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_int32_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  int32_tArray *arg1 = (int32_tArray *) 0 ;
  int arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int32_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int32_t)int32_tArray_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_int32_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  int32_tArray *arg1 = (int32_tArray *) 0 ;
  int arg2 ;
  int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int32_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int32_t)jarg3; 
  int32_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_int32_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  int32_tArray *arg1 = (int32_tArray *) 0 ;
  int32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int32_tArray **)&jarg1; 
  result = (int32_t *)int32_tArray_cast(arg1);
  *(int32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_int32_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int32_t *arg1 = (int32_t *) 0 ;
  int32_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int32_t **)&jarg1; 
  result = (int32_tArray *)int32_tArray_frompointer(arg1);
  *(int32_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1int64_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int64_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int64_tArray *)new_int64_tArray(arg1);
  *(int64_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1int64_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int64_tArray *arg1 = (int64_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int64_tArray **)&jarg1; 
  delete_int64_tArray(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_int64_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  int64_tArray *arg1 = (int64_tArray *) 0 ;
  int arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int64_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64_t)int64_tArray_getitem(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_int64_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  int64_tArray *arg1 = (int64_tArray *) 0 ;
  int arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int64_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int64_t)jarg3; 
  int64_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_int64_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  int64_tArray *arg1 = (int64_tArray *) 0 ;
  int64_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int64_tArray **)&jarg1; 
  result = (int64_t *)int64_tArray_cast(arg1);
  *(int64_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_int64_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int64_t *arg1 = (int64_t *) 0 ;
  int64_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int64_t **)&jarg1; 
  result = (int64_tArray *)int64_tArray_frompointer(arg1);
  *(int64_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1charArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  charArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (charArray *)new_charArray(arg1);
  *(charArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1charArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  charArray *arg1 = (charArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(charArray **)&jarg1; 
  delete_charArray(arg1);
}


SWIGEXPORT jchar JNICALL Java_io_tiledb_api_tiledbJNI_charArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  charArray *arg1 = (charArray *) 0 ;
  int arg2 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(charArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char)charArray_getitem(arg1,arg2);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_charArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3) {
  charArray *arg1 = (charArray *) 0 ;
  int arg2 ;
  char arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(charArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char)jarg3; 
  charArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jstring JNICALL Java_io_tiledb_api_tiledbJNI_charArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  charArray *arg1 = (charArray *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(charArray **)&jarg1; 
  result = (char *)charArray_cast(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_charArray_1frompointer(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  charArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (charArray *)charArray_frompointer(arg1);
  *(charArray **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1floatArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  floatArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (floatArray *)new_floatArray(arg1);
  *(floatArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1floatArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floatArray *arg1 = (floatArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floatArray **)&jarg1; 
  delete_floatArray(arg1);
}


SWIGEXPORT jfloat JNICALL Java_io_tiledb_api_tiledbJNI_floatArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  floatArray *arg1 = (floatArray *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floatArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)floatArray_getitem(arg1,arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_floatArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  floatArray *arg1 = (floatArray *) 0 ;
  int arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floatArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  floatArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_floatArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floatArray *arg1 = (floatArray *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floatArray **)&jarg1; 
  result = (float *)floatArray_cast(arg1);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_floatArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  float *arg1 = (float *) 0 ;
  floatArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  result = (floatArray *)floatArray_frompointer(arg1);
  *(floatArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1doubleArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  doubleArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (doubleArray *)new_doubleArray(arg1);
  *(doubleArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1doubleArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  doubleArray *arg1 = (doubleArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(doubleArray **)&jarg1; 
  delete_doubleArray(arg1);
}


SWIGEXPORT jdouble JNICALL Java_io_tiledb_api_tiledbJNI_doubleArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  doubleArray *arg1 = (doubleArray *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(doubleArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)doubleArray_getitem(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_doubleArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  doubleArray *arg1 = (doubleArray *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(doubleArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  doubleArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_doubleArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  doubleArray *arg1 = (doubleArray *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(doubleArray **)&jarg1; 
  result = (double *)doubleArray_cast(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_doubleArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  double *arg1 = (double *) 0 ;
  doubleArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  result = (doubleArray *)doubleArray_frompointer(arg1);
  *(doubleArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1int8_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int8_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int8_tArray *)new_int8_tArray(arg1);
  *(int8_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1int8_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int8_tArray *arg1 = (int8_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int8_tArray **)&jarg1; 
  delete_int8_tArray(arg1);
}


SWIGEXPORT jbyte JNICALL Java_io_tiledb_api_tiledbJNI_int8_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jbyte jresult = 0 ;
  int8_tArray *arg1 = (int8_tArray *) 0 ;
  int arg2 ;
  int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int8_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int8_t)int8_tArray_getitem(arg1,arg2);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_int8_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyte jarg3) {
  int8_tArray *arg1 = (int8_tArray *) 0 ;
  int arg2 ;
  int8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int8_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int8_t)jarg3; 
  int8_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_int8_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  int8_tArray *arg1 = (int8_tArray *) 0 ;
  int8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int8_tArray **)&jarg1; 
  result = (int8_t *)int8_tArray_cast(arg1);
  *(int8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_int8_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int8_t *arg1 = (int8_t *) 0 ;
  int8_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int8_t **)&jarg1; 
  result = (int8_tArray *)int8_tArray_frompointer(arg1);
  *(int8_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1uint8_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  uint8_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (uint8_tArray *)new_uint8_tArray(arg1);
  *(uint8_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1uint8_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uint8_tArray *arg1 = (uint8_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_tArray **)&jarg1; 
  delete_uint8_tArray(arg1);
}


SWIGEXPORT jshort JNICALL Java_io_tiledb_api_tiledbJNI_uint8_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  uint8_tArray *arg1 = (uint8_tArray *) 0 ;
  int arg2 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint8_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (uint8_t)uint8_tArray_getitem(arg1,arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_uint8_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  uint8_tArray *arg1 = (uint8_tArray *) 0 ;
  int arg2 ;
  uint8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint8_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint8_t)jarg3; 
  uint8_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_uint8_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uint8_tArray *arg1 = (uint8_tArray *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint8_tArray **)&jarg1; 
  result = (uint8_t *)uint8_tArray_cast(arg1);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_uint8_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint8_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  result = (uint8_tArray *)uint8_tArray_frompointer(arg1);
  *(uint8_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1int16_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int16_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int16_tArray *)new_int16_tArray(arg1);
  *(int16_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1int16_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int16_tArray *arg1 = (int16_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int16_tArray **)&jarg1; 
  delete_int16_tArray(arg1);
}


SWIGEXPORT jshort JNICALL Java_io_tiledb_api_tiledbJNI_int16_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  int16_tArray *arg1 = (int16_tArray *) 0 ;
  int arg2 ;
  int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int16_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int16_t)int16_tArray_getitem(arg1,arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_int16_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  int16_tArray *arg1 = (int16_tArray *) 0 ;
  int arg2 ;
  int16_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int16_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int16_t)jarg3; 
  int16_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_int16_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  int16_tArray *arg1 = (int16_tArray *) 0 ;
  int16_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int16_tArray **)&jarg1; 
  result = (int16_t *)int16_tArray_cast(arg1);
  *(int16_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_int16_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int16_t *arg1 = (int16_t *) 0 ;
  int16_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int16_t **)&jarg1; 
  result = (int16_tArray *)int16_tArray_frompointer(arg1);
  *(int16_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1uint16_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  uint16_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (uint16_tArray *)new_uint16_tArray(arg1);
  *(uint16_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1uint16_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uint16_tArray *arg1 = (uint16_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint16_tArray **)&jarg1; 
  delete_uint16_tArray(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_uint16_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  uint16_tArray *arg1 = (uint16_tArray *) 0 ;
  int arg2 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint16_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (uint16_t)uint16_tArray_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_uint16_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  uint16_tArray *arg1 = (uint16_tArray *) 0 ;
  int arg2 ;
  uint16_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint16_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint16_t)jarg3; 
  uint16_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_uint16_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uint16_tArray *arg1 = (uint16_tArray *) 0 ;
  uint16_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint16_tArray **)&jarg1; 
  result = (uint16_t *)uint16_tArray_cast(arg1);
  *(uint16_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_uint16_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint16_t *arg1 = (uint16_t *) 0 ;
  uint16_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint16_t **)&jarg1; 
  result = (uint16_tArray *)uint16_tArray_frompointer(arg1);
  *(uint16_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1uint32_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  uint32_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (uint32_tArray *)new_uint32_tArray(arg1);
  *(uint32_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1uint32_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uint32_tArray *arg1 = (uint32_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint32_tArray **)&jarg1; 
  delete_uint32_tArray(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_uint32_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  uint32_tArray *arg1 = (uint32_tArray *) 0 ;
  int arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint32_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (uint32_t)uint32_tArray_getitem(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_uint32_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  uint32_tArray *arg1 = (uint32_tArray *) 0 ;
  int arg2 ;
  uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint32_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint32_t)jarg3; 
  uint32_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_uint32_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uint32_tArray *arg1 = (uint32_tArray *) 0 ;
  uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint32_tArray **)&jarg1; 
  result = (uint32_t *)uint32_tArray_cast(arg1);
  *(uint32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_uint32_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint32_t *arg1 = (uint32_t *) 0 ;
  uint32_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint32_t **)&jarg1; 
  result = (uint32_tArray *)uint32_tArray_frompointer(arg1);
  *(uint32_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1uint64_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  uint64_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (uint64_tArray *)new_uint64_tArray(arg1);
  *(uint64_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1uint64_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uint64_tArray *arg1 = (uint64_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint64_tArray **)&jarg1; 
  delete_uint64_tArray(arg1);
}


SWIGEXPORT jobject JNICALL Java_io_tiledb_api_tiledbJNI_uint64_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jobject jresult = 0 ;
  uint64_tArray *arg1 = (uint64_tArray *) 0 ;
  int arg2 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint64_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (uint64_t)uint64_tArray_getitem(arg1,arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_uint64_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  uint64_tArray *arg1 = (uint64_tArray *) 0 ;
  int arg2 ;
  uint64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint64_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  uint64_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_uint64_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uint64_tArray *arg1 = (uint64_tArray *) 0 ;
  uint64_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint64_tArray **)&jarg1; 
  result = (uint64_t *)uint64_tArray_cast(arg1);
  *(uint64_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_uint64_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint64_t *arg1 = (uint64_t *) 0 ;
  uint64_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint64_t **)&jarg1; 
  result = (uint64_tArray *)uint64_tArray_frompointer(arg1);
  *(uint64_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1charpArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char **)new_charpArray(arg1);
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1charpArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  char **arg1 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  delete_charpArray(arg1);
}


SWIGEXPORT jstring JNICALL Java_io_tiledb_api_tiledbJNI_charpArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  char **arg1 = (char **) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)charpArray_getitem(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_charpArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  char **arg1 = (char **) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  charpArray_setitem(arg1,arg2,arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1voidpArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  void **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (void **)new_voidpArray(arg1);
  *(void ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1voidpArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void **arg1 = (void **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ***)&jarg1; 
  delete_voidpArray(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_voidpArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  void **arg1 = (void **) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ***)&jarg1; 
  arg2 = (int)jarg2; 
  result = (void *)voidpArray_getitem(arg1,arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_voidpArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  void **arg1 = (void **) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ***)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(void **)&jarg3; 
  voidpArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1intp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)new_intp();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1intp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)copy_intp(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1intp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_intp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_intp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  intp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_intp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (int)intp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1floatp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (float *)new_floatp();
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1floatp(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (float *)copy_floatp(arg1);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1floatp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  float *arg1 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  delete_floatp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_floatp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  float *arg1 = (float *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  arg2 = (float)jarg2; 
  floatp_assign(arg1,arg2);
}


SWIGEXPORT jfloat JNICALL Java_io_tiledb_api_tiledbJNI_floatp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jfloat jresult = 0 ;
  float *arg1 = (float *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  result = (float)floatp_value(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1intpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int **)new_intpp();
  *(int ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1intpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (int **)copy_intpp(arg1);
  *(int ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1intpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int **arg1 = (int **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int ***)&jarg1; 
  delete_intpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_intpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int ***)&jarg1; 
  arg2 = *(int **)&jarg2; 
  intpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_intpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int **arg1 = (int **) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int ***)&jarg1; 
  result = (int *)intpp_value(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1charpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char **)new_charpp();
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1charpp(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char **)copy_charpp(arg1);
  *(char ***)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1charpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  char **arg1 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  delete_charpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_charpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  char **arg1 = (char **) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  charpp_assign(arg1,arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_tiledb_api_tiledbJNI_charpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  char **arg1 = (char **) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  result = (char *)charpp_value(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1uintp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int *)new_uintp();
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1uintp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (unsigned int *)copy_uintp(arg1);
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1uintp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  delete_uintp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_uintp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  uintp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_uintp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  result = (unsigned int)uintp_value(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1ullp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned long long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned long long *)new_ullp();
  *(unsigned long long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1ullp(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  unsigned long long arg1 ;
  unsigned long long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (unsigned long long *)copy_ullp(arg1);
  *(unsigned long long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1ullp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned long long *arg1 = (unsigned long long *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long long **)&jarg1; 
  delete_ullp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_ullp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  unsigned long long *arg1 = (unsigned long long *) 0 ;
  unsigned long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long long **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  ullp_assign(arg1,arg2);
}


SWIGEXPORT jobject JNICALL Java_io_tiledb_api_tiledbJNI_ullp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jobject jresult = 0 ;
  unsigned long long *arg1 = (unsigned long long *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long long **)&jarg1; 
  result = (unsigned long long)ullp_value(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1config_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_config_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_config_t *)new_tiledb_config_tp();
  *(tiledb_config_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1config_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_config_t arg1 ;
  tiledb_config_t *argp1 ;
  tiledb_config_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_config_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_config_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_config_t *)copy_tiledb_config_tp(arg1);
  *(tiledb_config_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1config_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  delete_tiledb_config_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  tiledb_config_t arg2 ;
  tiledb_config_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  argp2 = *(tiledb_config_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_config_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_config_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  tiledb_config_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  result = tiledb_config_tp_value(arg1);
  *(tiledb_config_t **)&jresult = new tiledb_config_t((const tiledb_config_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1config_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_config_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_config_t **)new_tiledb_config_tpp();
  *(tiledb_config_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1config_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  tiledb_config_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  result = (tiledb_config_t **)copy_tiledb_config_tpp(arg1);
  *(tiledb_config_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1config_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_config_t **arg1 = (tiledb_config_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t ***)&jarg1; 
  delete_tiledb_config_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_config_t **arg1 = (tiledb_config_t **) 0 ;
  tiledb_config_t *arg2 = (tiledb_config_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_config_t ***)&jarg1; 
  arg2 = *(tiledb_config_t **)&jarg2; 
  tiledb_config_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_config_t **arg1 = (tiledb_config_t **) 0 ;
  tiledb_config_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t ***)&jarg1; 
  result = (tiledb_config_t *)tiledb_config_tpp_value(arg1);
  *(tiledb_config_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1config_1iter_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_config_iter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_config_iter_t *)new_tiledb_config_iter_tp();
  *(tiledb_config_iter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1config_1iter_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_config_iter_t arg1 ;
  tiledb_config_iter_t *argp1 ;
  tiledb_config_iter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_config_iter_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_config_iter_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_config_iter_t *)copy_tiledb_config_iter_tp(arg1);
  *(tiledb_config_iter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1config_1iter_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  delete_tiledb_config_iter_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1iter_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  tiledb_config_iter_t arg2 ;
  tiledb_config_iter_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  argp2 = *(tiledb_config_iter_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_config_iter_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_config_iter_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1iter_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  tiledb_config_iter_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  result = tiledb_config_iter_tp_value(arg1);
  *(tiledb_config_iter_t **)&jresult = new tiledb_config_iter_t((const tiledb_config_iter_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1config_1iter_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_config_iter_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_config_iter_t **)new_tiledb_config_iter_tpp();
  *(tiledb_config_iter_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1config_1iter_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  tiledb_config_iter_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  result = (tiledb_config_iter_t **)copy_tiledb_config_iter_tpp(arg1);
  *(tiledb_config_iter_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1config_1iter_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_config_iter_t **arg1 = (tiledb_config_iter_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_iter_t ***)&jarg1; 
  delete_tiledb_config_iter_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1iter_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_config_iter_t **arg1 = (tiledb_config_iter_t **) 0 ;
  tiledb_config_iter_t *arg2 = (tiledb_config_iter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_config_iter_t ***)&jarg1; 
  arg2 = *(tiledb_config_iter_t **)&jarg2; 
  tiledb_config_iter_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1iter_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_config_iter_t **arg1 = (tiledb_config_iter_t **) 0 ;
  tiledb_config_iter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_iter_t ***)&jarg1; 
  result = (tiledb_config_iter_t *)tiledb_config_iter_tpp_value(arg1);
  *(tiledb_config_iter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1ctx_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_ctx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_ctx_t *)new_tiledb_ctx_tp();
  *(tiledb_ctx_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1ctx_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_ctx_t arg1 ;
  tiledb_ctx_t *argp1 ;
  tiledb_ctx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_ctx_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_ctx_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_ctx_t *)copy_tiledb_ctx_tp(arg1);
  *(tiledb_ctx_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1ctx_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  delete_tiledb_ctx_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_ctx_t arg2 ;
  tiledb_ctx_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  argp2 = *(tiledb_ctx_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_ctx_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_ctx_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_ctx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  result = tiledb_ctx_tp_value(arg1);
  *(tiledb_ctx_t **)&jresult = new tiledb_ctx_t((const tiledb_ctx_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1ctx_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_ctx_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_ctx_t **)new_tiledb_ctx_tpp();
  *(tiledb_ctx_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1ctx_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_ctx_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  result = (tiledb_ctx_t **)copy_tiledb_ctx_tpp(arg1);
  *(tiledb_ctx_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1ctx_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_ctx_t **arg1 = (tiledb_ctx_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t ***)&jarg1; 
  delete_tiledb_ctx_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_ctx_t **arg1 = (tiledb_ctx_t **) 0 ;
  tiledb_ctx_t *arg2 = (tiledb_ctx_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t ***)&jarg1; 
  arg2 = *(tiledb_ctx_t **)&jarg2; 
  tiledb_ctx_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_ctx_t **arg1 = (tiledb_ctx_t **) 0 ;
  tiledb_ctx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t ***)&jarg1; 
  result = (tiledb_ctx_t *)tiledb_ctx_tpp_value(arg1);
  *(tiledb_ctx_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1error_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_error_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_error_t *)new_tiledb_error_tp();
  *(tiledb_error_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1error_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_error_t arg1 ;
  tiledb_error_t *argp1 ;
  tiledb_error_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_error_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_error_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_error_t *)copy_tiledb_error_tp(arg1);
  *(tiledb_error_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1error_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_error_t **)&jarg1; 
  delete_tiledb_error_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  tiledb_error_t arg2 ;
  tiledb_error_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_error_t **)&jarg1; 
  argp2 = *(tiledb_error_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_error_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_error_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  tiledb_error_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_error_t **)&jarg1; 
  result = tiledb_error_tp_value(arg1);
  *(tiledb_error_t **)&jresult = new tiledb_error_t((const tiledb_error_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1error_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_error_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_error_t **)new_tiledb_error_tpp();
  *(tiledb_error_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1error_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  tiledb_error_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_error_t **)&jarg1; 
  result = (tiledb_error_t **)copy_tiledb_error_tpp(arg1);
  *(tiledb_error_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1error_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_error_t **arg1 = (tiledb_error_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_error_t ***)&jarg1; 
  delete_tiledb_error_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_error_t **arg1 = (tiledb_error_t **) 0 ;
  tiledb_error_t *arg2 = (tiledb_error_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_error_t ***)&jarg1; 
  arg2 = *(tiledb_error_t **)&jarg2; 
  tiledb_error_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_error_t **arg1 = (tiledb_error_t **) 0 ;
  tiledb_error_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_error_t ***)&jarg1; 
  result = (tiledb_error_t *)tiledb_error_tpp_value(arg1);
  *(tiledb_error_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1attribute_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_attribute_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_attribute_t *)new_tiledb_attribute_tp();
  *(tiledb_attribute_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1attribute_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_attribute_t arg1 ;
  tiledb_attribute_t *argp1 ;
  tiledb_attribute_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_attribute_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_attribute_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_attribute_t *)copy_tiledb_attribute_tp(arg1);
  *(tiledb_attribute_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1attribute_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_attribute_t *arg1 = (tiledb_attribute_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_attribute_t **)&jarg1; 
  delete_tiledb_attribute_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_attribute_t *arg1 = (tiledb_attribute_t *) 0 ;
  tiledb_attribute_t arg2 ;
  tiledb_attribute_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_attribute_t **)&jarg1; 
  argp2 = *(tiledb_attribute_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_attribute_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_attribute_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_attribute_t *arg1 = (tiledb_attribute_t *) 0 ;
  tiledb_attribute_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_attribute_t **)&jarg1; 
  result = tiledb_attribute_tp_value(arg1);
  *(tiledb_attribute_t **)&jresult = new tiledb_attribute_t((const tiledb_attribute_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1attribute_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_attribute_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_attribute_t **)new_tiledb_attribute_tpp();
  *(tiledb_attribute_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1attribute_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_attribute_t *arg1 = (tiledb_attribute_t *) 0 ;
  tiledb_attribute_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_attribute_t **)&jarg1; 
  result = (tiledb_attribute_t **)copy_tiledb_attribute_tpp(arg1);
  *(tiledb_attribute_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1attribute_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_attribute_t **arg1 = (tiledb_attribute_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_attribute_t ***)&jarg1; 
  delete_tiledb_attribute_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_attribute_t **arg1 = (tiledb_attribute_t **) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_attribute_t ***)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  tiledb_attribute_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_attribute_t **arg1 = (tiledb_attribute_t **) 0 ;
  tiledb_attribute_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_attribute_t ***)&jarg1; 
  result = (tiledb_attribute_t *)tiledb_attribute_tpp_value(arg1);
  *(tiledb_attribute_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1array_1schema_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_array_schema_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_array_schema_t *)new_tiledb_array_schema_tp();
  *(tiledb_array_schema_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1array_1schema_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_array_schema_t arg1 ;
  tiledb_array_schema_t *argp1 ;
  tiledb_array_schema_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_array_schema_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_array_schema_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_array_schema_t *)copy_tiledb_array_schema_tp(arg1);
  *(tiledb_array_schema_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1array_1schema_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_array_schema_t *arg1 = (tiledb_array_schema_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_array_schema_t **)&jarg1; 
  delete_tiledb_array_schema_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_array_schema_t *arg1 = (tiledb_array_schema_t *) 0 ;
  tiledb_array_schema_t arg2 ;
  tiledb_array_schema_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_array_schema_t **)&jarg1; 
  argp2 = *(tiledb_array_schema_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_array_schema_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_array_schema_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_array_schema_t *arg1 = (tiledb_array_schema_t *) 0 ;
  tiledb_array_schema_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_array_schema_t **)&jarg1; 
  result = tiledb_array_schema_tp_value(arg1);
  *(tiledb_array_schema_t **)&jresult = new tiledb_array_schema_t((const tiledb_array_schema_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1array_1schema_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_array_schema_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_array_schema_t **)new_tiledb_array_schema_tpp();
  *(tiledb_array_schema_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1array_1schema_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_array_schema_t *arg1 = (tiledb_array_schema_t *) 0 ;
  tiledb_array_schema_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_array_schema_t **)&jarg1; 
  result = (tiledb_array_schema_t **)copy_tiledb_array_schema_tpp(arg1);
  *(tiledb_array_schema_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1array_1schema_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_array_schema_t **arg1 = (tiledb_array_schema_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_schema_t ***)&jarg1; 
  delete_tiledb_array_schema_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_array_schema_t **arg1 = (tiledb_array_schema_t **) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_array_schema_t ***)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  tiledb_array_schema_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_array_schema_t **arg1 = (tiledb_array_schema_t **) 0 ;
  tiledb_array_schema_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_schema_t ***)&jarg1; 
  result = (tiledb_array_schema_t *)tiledb_array_schema_tpp_value(arg1);
  *(tiledb_array_schema_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1dimension_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_dimension_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_dimension_t *)new_tiledb_dimension_tp();
  *(tiledb_dimension_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1dimension_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_dimension_t arg1 ;
  tiledb_dimension_t *argp1 ;
  tiledb_dimension_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_dimension_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_dimension_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_dimension_t *)copy_tiledb_dimension_tp(arg1);
  *(tiledb_dimension_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1dimension_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_dimension_t *arg1 = (tiledb_dimension_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_dimension_t **)&jarg1; 
  delete_tiledb_dimension_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_dimension_t *arg1 = (tiledb_dimension_t *) 0 ;
  tiledb_dimension_t arg2 ;
  tiledb_dimension_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_dimension_t **)&jarg1; 
  argp2 = *(tiledb_dimension_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_dimension_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_dimension_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_dimension_t *arg1 = (tiledb_dimension_t *) 0 ;
  tiledb_dimension_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_dimension_t **)&jarg1; 
  result = tiledb_dimension_tp_value(arg1);
  *(tiledb_dimension_t **)&jresult = new tiledb_dimension_t((const tiledb_dimension_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1dimension_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_dimension_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_dimension_t **)new_tiledb_dimension_tpp();
  *(tiledb_dimension_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1dimension_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_dimension_t *arg1 = (tiledb_dimension_t *) 0 ;
  tiledb_dimension_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_dimension_t **)&jarg1; 
  result = (tiledb_dimension_t **)copy_tiledb_dimension_tpp(arg1);
  *(tiledb_dimension_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1dimension_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_dimension_t **arg1 = (tiledb_dimension_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_dimension_t ***)&jarg1; 
  delete_tiledb_dimension_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_dimension_t **arg1 = (tiledb_dimension_t **) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_dimension_t ***)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  tiledb_dimension_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_dimension_t **arg1 = (tiledb_dimension_t **) 0 ;
  tiledb_dimension_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_dimension_t ***)&jarg1; 
  result = (tiledb_dimension_t *)tiledb_dimension_tpp_value(arg1);
  *(tiledb_dimension_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1domain_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_domain_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_domain_t *)new_tiledb_domain_tp();
  *(tiledb_domain_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1domain_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_domain_t arg1 ;
  tiledb_domain_t *argp1 ;
  tiledb_domain_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_domain_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_domain_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_domain_t *)copy_tiledb_domain_tp(arg1);
  *(tiledb_domain_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1domain_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_domain_t *arg1 = (tiledb_domain_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_domain_t **)&jarg1; 
  delete_tiledb_domain_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_domain_t *arg1 = (tiledb_domain_t *) 0 ;
  tiledb_domain_t arg2 ;
  tiledb_domain_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_domain_t **)&jarg1; 
  argp2 = *(tiledb_domain_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_domain_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_domain_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_domain_t *arg1 = (tiledb_domain_t *) 0 ;
  tiledb_domain_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_domain_t **)&jarg1; 
  result = tiledb_domain_tp_value(arg1);
  *(tiledb_domain_t **)&jresult = new tiledb_domain_t((const tiledb_domain_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1domain_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_domain_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_domain_t **)new_tiledb_domain_tpp();
  *(tiledb_domain_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1domain_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_domain_t *arg1 = (tiledb_domain_t *) 0 ;
  tiledb_domain_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_domain_t **)&jarg1; 
  result = (tiledb_domain_t **)copy_tiledb_domain_tpp(arg1);
  *(tiledb_domain_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1domain_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_domain_t **arg1 = (tiledb_domain_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_domain_t ***)&jarg1; 
  delete_tiledb_domain_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_domain_t **arg1 = (tiledb_domain_t **) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_domain_t ***)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  tiledb_domain_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_domain_t **arg1 = (tiledb_domain_t **) 0 ;
  tiledb_domain_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_domain_t ***)&jarg1; 
  result = (tiledb_domain_t *)tiledb_domain_tpp_value(arg1);
  *(tiledb_domain_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1query_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_query_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_query_t *)new_tiledb_query_tp();
  *(tiledb_query_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1query_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_query_t arg1 ;
  tiledb_query_t *argp1 ;
  tiledb_query_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_query_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_query_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_query_t *)copy_tiledb_query_tp(arg1);
  *(tiledb_query_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1query_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_query_t *arg1 = (tiledb_query_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_query_t **)&jarg1; 
  delete_tiledb_query_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_query_t *arg1 = (tiledb_query_t *) 0 ;
  tiledb_query_t arg2 ;
  tiledb_query_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_query_t **)&jarg1; 
  argp2 = *(tiledb_query_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_query_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_query_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_query_t *arg1 = (tiledb_query_t *) 0 ;
  tiledb_query_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_query_t **)&jarg1; 
  result = tiledb_query_tp_value(arg1);
  *(tiledb_query_t **)&jresult = new tiledb_query_t((const tiledb_query_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1query_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_query_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_query_t **)new_tiledb_query_tpp();
  *(tiledb_query_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1query_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_query_t *arg1 = (tiledb_query_t *) 0 ;
  tiledb_query_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_query_t **)&jarg1; 
  result = (tiledb_query_t **)copy_tiledb_query_tpp(arg1);
  *(tiledb_query_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1query_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_query_t **arg1 = (tiledb_query_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_t ***)&jarg1; 
  delete_tiledb_query_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_query_t **arg1 = (tiledb_query_t **) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_query_t ***)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  tiledb_query_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_query_t **arg1 = (tiledb_query_t **) 0 ;
  tiledb_query_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_t ***)&jarg1; 
  result = (tiledb_query_t *)tiledb_query_tpp_value(arg1);
  *(tiledb_query_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1kv_1schema_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_kv_schema_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_kv_schema_t *)new_tiledb_kv_schema_tp();
  *(tiledb_kv_schema_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1kv_1schema_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_schema_t arg1 ;
  tiledb_kv_schema_t *argp1 ;
  tiledb_kv_schema_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_kv_schema_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_kv_schema_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_kv_schema_t *)copy_tiledb_kv_schema_tp(arg1);
  *(tiledb_kv_schema_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1kv_1schema_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_kv_schema_t *arg1 = (tiledb_kv_schema_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_schema_t **)&jarg1; 
  delete_tiledb_kv_schema_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_kv_schema_t *arg1 = (tiledb_kv_schema_t *) 0 ;
  tiledb_kv_schema_t arg2 ;
  tiledb_kv_schema_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_kv_schema_t **)&jarg1; 
  argp2 = *(tiledb_kv_schema_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_kv_schema_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_kv_schema_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_schema_t *arg1 = (tiledb_kv_schema_t *) 0 ;
  tiledb_kv_schema_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_schema_t **)&jarg1; 
  result = tiledb_kv_schema_tp_value(arg1);
  *(tiledb_kv_schema_t **)&jresult = new tiledb_kv_schema_t((const tiledb_kv_schema_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1kv_1schema_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_kv_schema_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_kv_schema_t **)new_tiledb_kv_schema_tpp();
  *(tiledb_kv_schema_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1kv_1schema_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_schema_t *arg1 = (tiledb_kv_schema_t *) 0 ;
  tiledb_kv_schema_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_schema_t **)&jarg1; 
  result = (tiledb_kv_schema_t **)copy_tiledb_kv_schema_tpp(arg1);
  *(tiledb_kv_schema_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1kv_1schema_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_kv_schema_t **arg1 = (tiledb_kv_schema_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_kv_schema_t ***)&jarg1; 
  delete_tiledb_kv_schema_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_kv_schema_t **arg1 = (tiledb_kv_schema_t **) 0 ;
  tiledb_kv_schema_t *arg2 = (tiledb_kv_schema_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_kv_schema_t ***)&jarg1; 
  arg2 = *(tiledb_kv_schema_t **)&jarg2; 
  tiledb_kv_schema_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_kv_schema_t **arg1 = (tiledb_kv_schema_t **) 0 ;
  tiledb_kv_schema_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_kv_schema_t ***)&jarg1; 
  result = (tiledb_kv_schema_t *)tiledb_kv_schema_tpp_value(arg1);
  *(tiledb_kv_schema_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1kv_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_kv_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_kv_t *)new_tiledb_kv_tp();
  *(tiledb_kv_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1kv_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_t arg1 ;
  tiledb_kv_t *argp1 ;
  tiledb_kv_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_kv_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_kv_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_kv_t *)copy_tiledb_kv_tp(arg1);
  *(tiledb_kv_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1kv_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_kv_t *arg1 = (tiledb_kv_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_t **)&jarg1; 
  delete_tiledb_kv_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_kv_t *arg1 = (tiledb_kv_t *) 0 ;
  tiledb_kv_t arg2 ;
  tiledb_kv_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_kv_t **)&jarg1; 
  argp2 = *(tiledb_kv_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_kv_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_kv_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_t *arg1 = (tiledb_kv_t *) 0 ;
  tiledb_kv_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_t **)&jarg1; 
  result = tiledb_kv_tp_value(arg1);
  *(tiledb_kv_t **)&jresult = new tiledb_kv_t((const tiledb_kv_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1kv_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_kv_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_kv_t **)new_tiledb_kv_tpp();
  *(tiledb_kv_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1kv_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_t *arg1 = (tiledb_kv_t *) 0 ;
  tiledb_kv_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_t **)&jarg1; 
  result = (tiledb_kv_t **)copy_tiledb_kv_tpp(arg1);
  *(tiledb_kv_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1kv_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_kv_t **arg1 = (tiledb_kv_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_kv_t ***)&jarg1; 
  delete_tiledb_kv_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_kv_t **arg1 = (tiledb_kv_t **) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_kv_t ***)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  tiledb_kv_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_kv_t **arg1 = (tiledb_kv_t **) 0 ;
  tiledb_kv_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_kv_t ***)&jarg1; 
  result = (tiledb_kv_t *)tiledb_kv_tpp_value(arg1);
  *(tiledb_kv_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1kv_1item_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_kv_item_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_kv_item_t *)new_tiledb_kv_item_tp();
  *(tiledb_kv_item_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1kv_1item_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_item_t arg1 ;
  tiledb_kv_item_t *argp1 ;
  tiledb_kv_item_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_kv_item_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_kv_item_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_kv_item_t *)copy_tiledb_kv_item_tp(arg1);
  *(tiledb_kv_item_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1kv_1item_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_kv_item_t *arg1 = (tiledb_kv_item_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_item_t **)&jarg1; 
  delete_tiledb_kv_item_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1item_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_kv_item_t *arg1 = (tiledb_kv_item_t *) 0 ;
  tiledb_kv_item_t arg2 ;
  tiledb_kv_item_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_kv_item_t **)&jarg1; 
  argp2 = *(tiledb_kv_item_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_kv_item_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_kv_item_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1item_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_item_t *arg1 = (tiledb_kv_item_t *) 0 ;
  tiledb_kv_item_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_item_t **)&jarg1; 
  result = tiledb_kv_item_tp_value(arg1);
  *(tiledb_kv_item_t **)&jresult = new tiledb_kv_item_t((const tiledb_kv_item_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1kv_1item_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_kv_item_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_kv_item_t **)new_tiledb_kv_item_tpp();
  *(tiledb_kv_item_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1kv_1item_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_item_t *arg1 = (tiledb_kv_item_t *) 0 ;
  tiledb_kv_item_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_item_t **)&jarg1; 
  result = (tiledb_kv_item_t **)copy_tiledb_kv_item_tpp(arg1);
  *(tiledb_kv_item_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1kv_1item_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_kv_item_t **arg1 = (tiledb_kv_item_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_kv_item_t ***)&jarg1; 
  delete_tiledb_kv_item_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1item_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_kv_item_t **arg1 = (tiledb_kv_item_t **) 0 ;
  tiledb_kv_item_t *arg2 = (tiledb_kv_item_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_kv_item_t ***)&jarg1; 
  arg2 = *(tiledb_kv_item_t **)&jarg2; 
  tiledb_kv_item_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1item_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_kv_item_t **arg1 = (tiledb_kv_item_t **) 0 ;
  tiledb_kv_item_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_kv_item_t ***)&jarg1; 
  result = (tiledb_kv_item_t *)tiledb_kv_item_tpp_value(arg1);
  *(tiledb_kv_item_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1kv_1iter_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_kv_iter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_kv_iter_t *)new_tiledb_kv_iter_tp();
  *(tiledb_kv_iter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1kv_1iter_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_iter_t arg1 ;
  tiledb_kv_iter_t *argp1 ;
  tiledb_kv_iter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_kv_iter_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_kv_iter_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_kv_iter_t *)copy_tiledb_kv_iter_tp(arg1);
  *(tiledb_kv_iter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1kv_1iter_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_kv_iter_t *arg1 = (tiledb_kv_iter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_iter_t **)&jarg1; 
  delete_tiledb_kv_iter_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1iter_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_kv_iter_t *arg1 = (tiledb_kv_iter_t *) 0 ;
  tiledb_kv_iter_t arg2 ;
  tiledb_kv_iter_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_kv_iter_t **)&jarg1; 
  argp2 = *(tiledb_kv_iter_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_kv_iter_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_kv_iter_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1iter_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_iter_t *arg1 = (tiledb_kv_iter_t *) 0 ;
  tiledb_kv_iter_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_iter_t **)&jarg1; 
  result = tiledb_kv_iter_tp_value(arg1);
  *(tiledb_kv_iter_t **)&jresult = new tiledb_kv_iter_t((const tiledb_kv_iter_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1kv_1iter_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_kv_iter_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_kv_iter_t **)new_tiledb_kv_iter_tpp();
  *(tiledb_kv_iter_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1kv_1iter_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_iter_t *arg1 = (tiledb_kv_iter_t *) 0 ;
  tiledb_kv_iter_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_iter_t **)&jarg1; 
  result = (tiledb_kv_iter_t **)copy_tiledb_kv_iter_tpp(arg1);
  *(tiledb_kv_iter_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1kv_1iter_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_kv_iter_t **arg1 = (tiledb_kv_iter_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_kv_iter_t ***)&jarg1; 
  delete_tiledb_kv_iter_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1iter_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_kv_iter_t **arg1 = (tiledb_kv_iter_t **) 0 ;
  tiledb_kv_iter_t *arg2 = (tiledb_kv_iter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_kv_iter_t ***)&jarg1; 
  arg2 = *(tiledb_kv_iter_t **)&jarg2; 
  tiledb_kv_iter_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1iter_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_kv_iter_t **arg1 = (tiledb_kv_iter_t **) 0 ;
  tiledb_kv_iter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_kv_iter_t ***)&jarg1; 
  result = (tiledb_kv_iter_t *)tiledb_kv_iter_tpp_value(arg1);
  *(tiledb_kv_iter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1vfs_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_vfs_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_vfs_t *)new_tiledb_vfs_tp();
  *(tiledb_vfs_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1vfs_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_vfs_t arg1 ;
  tiledb_vfs_t *argp1 ;
  tiledb_vfs_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_vfs_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_vfs_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_vfs_t *)copy_tiledb_vfs_tp(arg1);
  *(tiledb_vfs_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1vfs_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_vfs_t *arg1 = (tiledb_vfs_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_t **)&jarg1; 
  delete_tiledb_vfs_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_vfs_t *arg1 = (tiledb_vfs_t *) 0 ;
  tiledb_vfs_t arg2 ;
  tiledb_vfs_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_vfs_t **)&jarg1; 
  argp2 = *(tiledb_vfs_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_vfs_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_vfs_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_vfs_t *arg1 = (tiledb_vfs_t *) 0 ;
  tiledb_vfs_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_t **)&jarg1; 
  result = tiledb_vfs_tp_value(arg1);
  *(tiledb_vfs_t **)&jresult = new tiledb_vfs_t((const tiledb_vfs_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1vfs_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_vfs_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_vfs_t **)new_tiledb_vfs_tpp();
  *(tiledb_vfs_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1vfs_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_vfs_t *arg1 = (tiledb_vfs_t *) 0 ;
  tiledb_vfs_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_t **)&jarg1; 
  result = (tiledb_vfs_t **)copy_tiledb_vfs_tpp(arg1);
  *(tiledb_vfs_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1vfs_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_vfs_t **arg1 = (tiledb_vfs_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_t ***)&jarg1; 
  delete_tiledb_vfs_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_vfs_t **arg1 = (tiledb_vfs_t **) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_vfs_t ***)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  tiledb_vfs_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_vfs_t **arg1 = (tiledb_vfs_t **) 0 ;
  tiledb_vfs_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_t ***)&jarg1; 
  result = (tiledb_vfs_t *)tiledb_vfs_tpp_value(arg1);
  *(tiledb_vfs_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1vfs_1fh_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_vfs_fh_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_vfs_fh_t *)new_tiledb_vfs_fh_tp();
  *(tiledb_vfs_fh_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1vfs_1fh_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_vfs_fh_t arg1 ;
  tiledb_vfs_fh_t *argp1 ;
  tiledb_vfs_fh_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(tiledb_vfs_fh_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_vfs_fh_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (tiledb_vfs_fh_t *)copy_tiledb_vfs_fh_tp(arg1);
  *(tiledb_vfs_fh_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1vfs_1fh_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  tiledb_vfs_fh_t *arg1 = (tiledb_vfs_fh_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_fh_t **)&jarg1; 
  delete_tiledb_vfs_fh_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1fh_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  tiledb_vfs_fh_t *arg1 = (tiledb_vfs_fh_t *) 0 ;
  tiledb_vfs_fh_t arg2 ;
  tiledb_vfs_fh_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_vfs_fh_t **)&jarg1; 
  argp2 = *(tiledb_vfs_fh_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb_vfs_fh_t");
    return ;
  }
  arg2 = *argp2; 
  tiledb_vfs_fh_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1fh_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_vfs_fh_t *arg1 = (tiledb_vfs_fh_t *) 0 ;
  tiledb_vfs_fh_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_fh_t **)&jarg1; 
  result = tiledb_vfs_fh_tp_value(arg1);
  *(tiledb_vfs_fh_t **)&jresult = new tiledb_vfs_fh_t((const tiledb_vfs_fh_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1vfs_1fh_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_vfs_fh_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_vfs_fh_t **)new_tiledb_vfs_fh_tpp();
  *(tiledb_vfs_fh_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1vfs_1fh_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_vfs_fh_t *arg1 = (tiledb_vfs_fh_t *) 0 ;
  tiledb_vfs_fh_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_fh_t **)&jarg1; 
  result = (tiledb_vfs_fh_t **)copy_tiledb_vfs_fh_tpp(arg1);
  *(tiledb_vfs_fh_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1vfs_1fh_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_vfs_fh_t **arg1 = (tiledb_vfs_fh_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_fh_t ***)&jarg1; 
  delete_tiledb_vfs_fh_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1fh_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  tiledb_vfs_fh_t **arg1 = (tiledb_vfs_fh_t **) 0 ;
  tiledb_vfs_fh_t *arg2 = (tiledb_vfs_fh_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_vfs_fh_t ***)&jarg1; 
  arg2 = *(tiledb_vfs_fh_t **)&jarg2; 
  tiledb_vfs_fh_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1fh_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_vfs_fh_t **arg1 = (tiledb_vfs_fh_t **) 0 ;
  tiledb_vfs_fh_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_fh_t ***)&jarg1; 
  result = (tiledb_vfs_fh_t *)tiledb_vfs_fh_tpp_value(arg1);
  *(tiledb_vfs_fh_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1object_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_object_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_object_t *)new_tiledb_object_tp();
  *(tiledb_object_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1object_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_object_t arg1 ;
  tiledb_object_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_object_t)jarg1; 
  result = (tiledb_object_t *)copy_tiledb_object_tp(arg1);
  *(tiledb_object_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1object_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_object_t *arg1 = (tiledb_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_object_t **)&jarg1; 
  delete_tiledb_object_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1object_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_object_t *arg1 = (tiledb_object_t *) 0 ;
  tiledb_object_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_object_t **)&jarg1; 
  arg2 = (tiledb_object_t)jarg2; 
  tiledb_object_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1object_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_object_t *arg1 = (tiledb_object_t *) 0 ;
  tiledb_object_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_object_t **)&jarg1; 
  result = (tiledb_object_t)tiledb_object_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1query_1type_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_query_type_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_query_type_t *)new_tiledb_query_type_tp();
  *(tiledb_query_type_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1query_1type_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_query_type_t arg1 ;
  tiledb_query_type_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_query_type_t)jarg1; 
  result = (tiledb_query_type_t *)copy_tiledb_query_type_tp(arg1);
  *(tiledb_query_type_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1query_1type_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_query_type_t *arg1 = (tiledb_query_type_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_type_t **)&jarg1; 
  delete_tiledb_query_type_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1type_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_query_type_t *arg1 = (tiledb_query_type_t *) 0 ;
  tiledb_query_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_type_t **)&jarg1; 
  arg2 = (tiledb_query_type_t)jarg2; 
  tiledb_query_type_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1type_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_query_type_t *arg1 = (tiledb_query_type_t *) 0 ;
  tiledb_query_type_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_type_t **)&jarg1; 
  result = (tiledb_query_type_t)tiledb_query_type_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1query_1status_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_query_status_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_query_status_t *)new_tiledb_query_status_tp();
  *(tiledb_query_status_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1query_1status_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_query_status_t arg1 ;
  tiledb_query_status_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_query_status_t)jarg1; 
  result = (tiledb_query_status_t *)copy_tiledb_query_status_tp(arg1);
  *(tiledb_query_status_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1query_1status_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_query_status_t *arg1 = (tiledb_query_status_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_status_t **)&jarg1; 
  delete_tiledb_query_status_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1status_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_query_status_t *arg1 = (tiledb_query_status_t *) 0 ;
  tiledb_query_status_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_status_t **)&jarg1; 
  arg2 = (tiledb_query_status_t)jarg2; 
  tiledb_query_status_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1status_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_query_status_t *arg1 = (tiledb_query_status_t *) 0 ;
  tiledb_query_status_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_status_t **)&jarg1; 
  result = (tiledb_query_status_t)tiledb_query_status_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1filesystem_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_filesystem_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_filesystem_t *)new_tiledb_filesystem_tp();
  *(tiledb_filesystem_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1filesystem_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_filesystem_t arg1 ;
  tiledb_filesystem_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_filesystem_t)jarg1; 
  result = (tiledb_filesystem_t *)copy_tiledb_filesystem_tp(arg1);
  *(tiledb_filesystem_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1filesystem_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_filesystem_t *arg1 = (tiledb_filesystem_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filesystem_t **)&jarg1; 
  delete_tiledb_filesystem_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1filesystem_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_filesystem_t *arg1 = (tiledb_filesystem_t *) 0 ;
  tiledb_filesystem_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filesystem_t **)&jarg1; 
  arg2 = (tiledb_filesystem_t)jarg2; 
  tiledb_filesystem_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1filesystem_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_filesystem_t *arg1 = (tiledb_filesystem_t *) 0 ;
  tiledb_filesystem_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filesystem_t **)&jarg1; 
  result = (tiledb_filesystem_t)tiledb_filesystem_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1datatype_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_datatype_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_datatype_t *)new_tiledb_datatype_tp();
  *(tiledb_datatype_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1datatype_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_datatype_t arg1 ;
  tiledb_datatype_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_datatype_t)jarg1; 
  result = (tiledb_datatype_t *)copy_tiledb_datatype_tp(arg1);
  *(tiledb_datatype_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1datatype_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_datatype_t *arg1 = (tiledb_datatype_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_datatype_t **)&jarg1; 
  delete_tiledb_datatype_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1datatype_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_datatype_t *arg1 = (tiledb_datatype_t *) 0 ;
  tiledb_datatype_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_datatype_t **)&jarg1; 
  arg2 = (tiledb_datatype_t)jarg2; 
  tiledb_datatype_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1datatype_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_datatype_t *arg1 = (tiledb_datatype_t *) 0 ;
  tiledb_datatype_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_datatype_t **)&jarg1; 
  result = (tiledb_datatype_t)tiledb_datatype_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1array_1type_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_array_type_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_array_type_t *)new_tiledb_array_type_tp();
  *(tiledb_array_type_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1array_1type_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_array_type_t arg1 ;
  tiledb_array_type_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_array_type_t)jarg1; 
  result = (tiledb_array_type_t *)copy_tiledb_array_type_tp(arg1);
  *(tiledb_array_type_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1array_1type_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_array_type_t *arg1 = (tiledb_array_type_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_type_t **)&jarg1; 
  delete_tiledb_array_type_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1type_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_array_type_t *arg1 = (tiledb_array_type_t *) 0 ;
  tiledb_array_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_type_t **)&jarg1; 
  arg2 = (tiledb_array_type_t)jarg2; 
  tiledb_array_type_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1type_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_array_type_t *arg1 = (tiledb_array_type_t *) 0 ;
  tiledb_array_type_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_type_t **)&jarg1; 
  result = (tiledb_array_type_t)tiledb_array_type_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1layout_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_layout_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_layout_t *)new_tiledb_layout_tp();
  *(tiledb_layout_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1layout_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_layout_t arg1 ;
  tiledb_layout_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_layout_t)jarg1; 
  result = (tiledb_layout_t *)copy_tiledb_layout_tp(arg1);
  *(tiledb_layout_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1layout_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_layout_t *arg1 = (tiledb_layout_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_layout_t **)&jarg1; 
  delete_tiledb_layout_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1layout_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_layout_t *arg1 = (tiledb_layout_t *) 0 ;
  tiledb_layout_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_layout_t **)&jarg1; 
  arg2 = (tiledb_layout_t)jarg2; 
  tiledb_layout_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1layout_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_layout_t *arg1 = (tiledb_layout_t *) 0 ;
  tiledb_layout_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_layout_t **)&jarg1; 
  result = (tiledb_layout_t)tiledb_layout_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1compressor_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_compressor_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_compressor_t *)new_tiledb_compressor_tp();
  *(tiledb_compressor_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1compressor_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_compressor_t arg1 ;
  tiledb_compressor_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_compressor_t)jarg1; 
  result = (tiledb_compressor_t *)copy_tiledb_compressor_tp(arg1);
  *(tiledb_compressor_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1compressor_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_compressor_t *arg1 = (tiledb_compressor_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_compressor_t **)&jarg1; 
  delete_tiledb_compressor_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1compressor_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_compressor_t *arg1 = (tiledb_compressor_t *) 0 ;
  tiledb_compressor_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_compressor_t **)&jarg1; 
  arg2 = (tiledb_compressor_t)jarg2; 
  tiledb_compressor_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1compressor_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_compressor_t *arg1 = (tiledb_compressor_t *) 0 ;
  tiledb_compressor_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_compressor_t **)&jarg1; 
  result = (tiledb_compressor_t)tiledb_compressor_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1walk_1order_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_walk_order_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_walk_order_t *)new_tiledb_walk_order_tp();
  *(tiledb_walk_order_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1walk_1order_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_walk_order_t arg1 ;
  tiledb_walk_order_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_walk_order_t)jarg1; 
  result = (tiledb_walk_order_t *)copy_tiledb_walk_order_tp(arg1);
  *(tiledb_walk_order_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1walk_1order_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_walk_order_t *arg1 = (tiledb_walk_order_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_walk_order_t **)&jarg1; 
  delete_tiledb_walk_order_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1walk_1order_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_walk_order_t *arg1 = (tiledb_walk_order_t *) 0 ;
  tiledb_walk_order_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_walk_order_t **)&jarg1; 
  arg2 = (tiledb_walk_order_t)jarg2; 
  tiledb_walk_order_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1walk_1order_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_walk_order_t *arg1 = (tiledb_walk_order_t *) 0 ;
  tiledb_walk_order_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_walk_order_t **)&jarg1; 
  result = (tiledb_walk_order_t)tiledb_walk_order_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1vfs_1mode_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_vfs_mode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_vfs_mode_t *)new_tiledb_vfs_mode_tp();
  *(tiledb_vfs_mode_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_copy_1tiledb_1vfs_1mode_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_vfs_mode_t arg1 ;
  tiledb_vfs_mode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_vfs_mode_t)jarg1; 
  result = (tiledb_vfs_mode_t *)copy_tiledb_vfs_mode_tp(arg1);
  *(tiledb_vfs_mode_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1vfs_1mode_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_vfs_mode_t *arg1 = (tiledb_vfs_mode_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_mode_t **)&jarg1; 
  delete_tiledb_vfs_mode_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1mode_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_vfs_mode_t *arg1 = (tiledb_vfs_mode_t *) 0 ;
  tiledb_vfs_mode_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_mode_t **)&jarg1; 
  arg2 = (tiledb_vfs_mode_t)jarg2; 
  tiledb_vfs_mode_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1mode_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_vfs_mode_t *arg1 = (tiledb_vfs_mode_t *) 0 ;
  tiledb_vfs_mode_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_mode_t **)&jarg1; 
  result = (tiledb_vfs_mode_t)tiledb_vfs_mode_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1coords(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)tiledb_coords();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1var_1num(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)tiledb_var_num();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1max_1path(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)tiledb_max_path();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1datatype_1size(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jobject jresult = 0 ;
  tiledb_datatype_t arg1 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_datatype_t)jarg1; 
  result = (uint64_t)tiledb_datatype_size(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1offset_1size(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint64_t)tiledb_offset_size();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  tiledb_version(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1t_1config_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  tiledb::Config *arg2 = (tiledb::Config *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = *(tiledb::Config **)&jarg2; 
  if (arg1) (arg1)->config_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1t_1config_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  tiledb::Config *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  result = (tiledb::Config *) ((arg1)->config_);
  *(tiledb::Config **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1config_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_config_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_config_t *)new tiledb_config_t();
  *(tiledb_config_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1config_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1iter_1t_1param_1values_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2; 
  if (arg1) (arg1)->param_values_ = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1iter_1t_1param_1values_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  result = (std::map< std::string,std::string > *)& ((arg1)->param_values_);
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1iter_1t_1it_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  std::map< std::string,std::string >::iterator *arg2 = (std::map< std::string,std::string >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  arg2 = *(std::map< std::string,std::string >::iterator **)&jarg2; 
  if (arg1) (arg1)->it_ = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1iter_1t_1it_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  std::map< std::string,std::string >::iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  result = (std::map< std::string,std::string >::iterator *)& ((arg1)->it_);
  *(std::map< std::string,std::string >::iterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1config_1iter_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_config_iter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_config_iter_t *)new tiledb_config_iter_t();
  *(tiledb_config_iter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1config_1iter_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1t_1storage_1manager_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb::StorageManager *arg2 = (tiledb::StorageManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb::StorageManager **)&jarg2; 
  if (arg1) (arg1)->storage_manager_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1t_1storage_1manager_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb::StorageManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  result = (tiledb::StorageManager *) ((arg1)->storage_manager_);
  *(tiledb::StorageManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1t_1last_1error_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb::Status *arg2 = (tiledb::Status *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb::Status **)&jarg2; 
  if (arg1) (arg1)->last_error_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1t_1last_1error_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb::Status *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  result = (tiledb::Status *) ((arg1)->last_error_);
  *(tiledb::Status **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1t_1mtx_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  std::mutex *arg2 = (std::mutex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(std::mutex **)&jarg2; 
  if (arg1) (arg1)->mtx_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1t_1mtx_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  std::mutex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  result = (std::mutex *) ((arg1)->mtx_);
  *(std::mutex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1ctx_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_ctx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_ctx_t *)new tiledb_ctx_t();
  *(tiledb_ctx_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1ctx_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1t_1status_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  tiledb::Status *arg2 = (tiledb::Status *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_error_t **)&jarg1; 
  arg2 = *(tiledb::Status **)&jarg2; 
  if (arg1) (arg1)->status_ = (tiledb::Status const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1t_1status_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  tiledb::Status *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_error_t **)&jarg1; 
  result = (tiledb::Status *) ((arg1)->status_);
  *(tiledb::Status **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1t_1errmsg_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_error_t **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  if (arg1) (arg1)->errmsg_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1t_1errmsg_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_error_t **)&jarg1; 
  result = (std::string *) ((arg1)->errmsg_);
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1error_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_error_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_error_t *)new tiledb_error_t();
  *(tiledb_error_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1error_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_error_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1t_1attr_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_attribute_t *arg1 = (tiledb_attribute_t *) 0 ;
  tiledb::Attribute *arg2 = (tiledb::Attribute *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_attribute_t **)&jarg1; 
  arg2 = *(tiledb::Attribute **)&jarg2; 
  if (arg1) (arg1)->attr_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1t_1attr_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_attribute_t *arg1 = (tiledb_attribute_t *) 0 ;
  tiledb::Attribute *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_attribute_t **)&jarg1; 
  result = (tiledb::Attribute *) ((arg1)->attr_);
  *(tiledb::Attribute **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1attribute_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_attribute_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_attribute_t *)new tiledb_attribute_t();
  *(tiledb_attribute_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1attribute_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_attribute_t *arg1 = (tiledb_attribute_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_attribute_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1t_1array_1schema_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_array_schema_t *arg1 = (tiledb_array_schema_t *) 0 ;
  tiledb::ArraySchema *arg2 = (tiledb::ArraySchema *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_array_schema_t **)&jarg1; 
  arg2 = *(tiledb::ArraySchema **)&jarg2; 
  if (arg1) (arg1)->array_schema_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1t_1array_1schema_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_array_schema_t *arg1 = (tiledb_array_schema_t *) 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_array_schema_t **)&jarg1; 
  result = (tiledb::ArraySchema *) ((arg1)->array_schema_);
  *(tiledb::ArraySchema **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1array_1schema_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_array_schema_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_array_schema_t *)new tiledb_array_schema_t();
  *(tiledb_array_schema_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1array_1schema_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_array_schema_t *arg1 = (tiledb_array_schema_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_schema_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1t_1dim_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_dimension_t *arg1 = (tiledb_dimension_t *) 0 ;
  tiledb::Dimension *arg2 = (tiledb::Dimension *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_dimension_t **)&jarg1; 
  arg2 = *(tiledb::Dimension **)&jarg2; 
  if (arg1) (arg1)->dim_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1t_1dim_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_dimension_t *arg1 = (tiledb_dimension_t *) 0 ;
  tiledb::Dimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_dimension_t **)&jarg1; 
  result = (tiledb::Dimension *) ((arg1)->dim_);
  *(tiledb::Dimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1dimension_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_dimension_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_dimension_t *)new tiledb_dimension_t();
  *(tiledb_dimension_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1dimension_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_dimension_t *arg1 = (tiledb_dimension_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_dimension_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1t_1domain_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_domain_t *arg1 = (tiledb_domain_t *) 0 ;
  tiledb::Domain *arg2 = (tiledb::Domain *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_domain_t **)&jarg1; 
  arg2 = *(tiledb::Domain **)&jarg2; 
  if (arg1) (arg1)->domain_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1t_1domain_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_domain_t *arg1 = (tiledb_domain_t *) 0 ;
  tiledb::Domain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_domain_t **)&jarg1; 
  result = (tiledb::Domain *) ((arg1)->domain_);
  *(tiledb::Domain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1domain_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_domain_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_domain_t *)new tiledb_domain_t();
  *(tiledb_domain_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1domain_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_domain_t *arg1 = (tiledb_domain_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_domain_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1t_1query_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_query_t *arg1 = (tiledb_query_t *) 0 ;
  tiledb::Query *arg2 = (tiledb::Query *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_query_t **)&jarg1; 
  arg2 = *(tiledb::Query **)&jarg2; 
  if (arg1) (arg1)->query_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1t_1query_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_query_t *arg1 = (tiledb_query_t *) 0 ;
  tiledb::Query *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_query_t **)&jarg1; 
  result = (tiledb::Query *) ((arg1)->query_);
  *(tiledb::Query **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1query_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_query_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_query_t *)new tiledb_query_t();
  *(tiledb_query_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1query_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_query_t *arg1 = (tiledb_query_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1t_1array_1schema_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_kv_schema_t *arg1 = (tiledb_kv_schema_t *) 0 ;
  tiledb::ArraySchema *arg2 = (tiledb::ArraySchema *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_schema_t **)&jarg1; 
  arg2 = *(tiledb::ArraySchema **)&jarg2; 
  if (arg1) (arg1)->array_schema_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1t_1array_1schema_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_schema_t *arg1 = (tiledb_kv_schema_t *) 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_schema_t **)&jarg1; 
  result = (tiledb::ArraySchema *) ((arg1)->array_schema_);
  *(tiledb::ArraySchema **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1kv_1schema_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_kv_schema_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_kv_schema_t *)new tiledb_kv_schema_t();
  *(tiledb_kv_schema_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1kv_1schema_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_kv_schema_t *arg1 = (tiledb_kv_schema_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_kv_schema_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1t_1kv_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_kv_t *arg1 = (tiledb_kv_t *) 0 ;
  tiledb::KV *arg2 = (tiledb::KV *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_t **)&jarg1; 
  arg2 = *(tiledb::KV **)&jarg2; 
  if (arg1) (arg1)->kv_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1t_1kv_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_t *arg1 = (tiledb_kv_t *) 0 ;
  tiledb::KV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_t **)&jarg1; 
  result = (tiledb::KV *) ((arg1)->kv_);
  *(tiledb::KV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1kv_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_kv_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_kv_t *)new tiledb_kv_t();
  *(tiledb_kv_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1kv_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_kv_t *arg1 = (tiledb_kv_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_kv_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1item_1t_1kv_1item_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_kv_item_t *arg1 = (tiledb_kv_item_t *) 0 ;
  tiledb::KVItem *arg2 = (tiledb::KVItem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_item_t **)&jarg1; 
  arg2 = *(tiledb::KVItem **)&jarg2; 
  if (arg1) (arg1)->kv_item_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1item_1t_1kv_1item_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_item_t *arg1 = (tiledb_kv_item_t *) 0 ;
  tiledb::KVItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_item_t **)&jarg1; 
  result = (tiledb::KVItem *) ((arg1)->kv_item_);
  *(tiledb::KVItem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1kv_1item_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_kv_item_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_kv_item_t *)new tiledb_kv_item_t();
  *(tiledb_kv_item_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1kv_1item_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_kv_item_t *arg1 = (tiledb_kv_item_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_kv_item_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1iter_1t_1kv_1iter_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_kv_iter_t *arg1 = (tiledb_kv_iter_t *) 0 ;
  tiledb::KVIter *arg2 = (tiledb::KVIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_iter_t **)&jarg1; 
  arg2 = *(tiledb::KVIter **)&jarg2; 
  if (arg1) (arg1)->kv_iter_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1iter_1t_1kv_1iter_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_kv_iter_t *arg1 = (tiledb_kv_iter_t *) 0 ;
  tiledb::KVIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_kv_iter_t **)&jarg1; 
  result = (tiledb::KVIter *) ((arg1)->kv_iter_);
  *(tiledb::KVIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1kv_1iter_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_kv_iter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_kv_iter_t *)new tiledb_kv_iter_t();
  *(tiledb_kv_iter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1kv_1iter_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_kv_iter_t *arg1 = (tiledb_kv_iter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_kv_iter_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1t_1vfs_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_vfs_t *arg1 = (tiledb_vfs_t *) 0 ;
  tiledb::VFS *arg2 = (tiledb::VFS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_t **)&jarg1; 
  arg2 = *(tiledb::VFS **)&jarg2; 
  if (arg1) (arg1)->vfs_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1t_1vfs_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_vfs_t *arg1 = (tiledb_vfs_t *) 0 ;
  tiledb::VFS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_t **)&jarg1; 
  result = (tiledb::VFS *) ((arg1)->vfs_);
  *(tiledb::VFS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1vfs_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_vfs_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_vfs_t *)new tiledb_vfs_t();
  *(tiledb_vfs_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1vfs_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_vfs_t *arg1 = (tiledb_vfs_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1fh_1t_1uri_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_vfs_fh_t *arg1 = (tiledb_vfs_fh_t *) 0 ;
  tiledb::URI arg2 ;
  tiledb::URI *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_fh_t **)&jarg1; 
  argp2 = *(tiledb::URI **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb::URI");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->uri_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1fh_1t_1uri_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_vfs_fh_t *arg1 = (tiledb_vfs_fh_t *) 0 ;
  tiledb::URI result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_fh_t **)&jarg1; 
  result =  ((arg1)->uri_);
  *(tiledb::URI **)&jresult = new tiledb::URI((const tiledb::URI &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1fh_1t_1is_1closed_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  tiledb_vfs_fh_t *arg1 = (tiledb_vfs_fh_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_fh_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_closed_ = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1fh_1t_1is_1closed_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  tiledb_vfs_fh_t *arg1 = (tiledb_vfs_fh_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_fh_t **)&jarg1; 
  result = (bool) ((arg1)->is_closed_);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1fh_1t_1vfs_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_vfs_fh_t *arg1 = (tiledb_vfs_fh_t *) 0 ;
  tiledb::VFS *arg2 = (tiledb::VFS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_fh_t **)&jarg1; 
  arg2 = *(tiledb::VFS **)&jarg2; 
  if (arg1) (arg1)->vfs_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1fh_1t_1vfs_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_vfs_fh_t *arg1 = (tiledb_vfs_fh_t *) 0 ;
  tiledb::VFS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_fh_t **)&jarg1; 
  result = (tiledb::VFS *) ((arg1)->vfs_);
  *(tiledb::VFS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1fh_1t_1mode_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  tiledb_vfs_fh_t *arg1 = (tiledb_vfs_fh_t *) 0 ;
  tiledb::VFSMode arg2 ;
  tiledb::VFSMode *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_fh_t **)&jarg1; 
  argp2 = *(tiledb::VFSMode **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tiledb::VFSMode");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mode_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1fh_1t_1mode_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  tiledb_vfs_fh_t *arg1 = (tiledb_vfs_fh_t *) 0 ;
  tiledb::VFSMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_vfs_fh_t **)&jarg1; 
  result =  ((arg1)->mode_);
  *(tiledb::VFSMode **)&jresult = new tiledb::VFSMode((const tiledb::VFSMode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_new_1tiledb_1vfs_1fh_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_vfs_fh_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_vfs_fh_t *)new tiledb_vfs_fh_t();
  *(tiledb_vfs_fh_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_delete_1tiledb_1vfs_1fh_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_vfs_fh_t *arg1 = (tiledb_vfs_fh_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_fh_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  char **arg2 = (char **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_error_t **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = (int)tiledb_error_message(arg1,(char const **)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1error_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_error_t **)&jarg1; 
  result = (int)tiledb_error_free(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_config_t **arg1 = (tiledb_config_t **) 0 ;
  tiledb_error_t **arg2 = (tiledb_error_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t ***)&jarg1; 
  arg2 = *(tiledb_error_t ***)&jarg2; 
  result = (int)tiledb_config_create(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  result = (int)tiledb_config_free(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_error_t **arg4 = (tiledb_error_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_error_t ***)&jarg4; 
  result = (int)tiledb_config_set(arg1,(char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  tiledb_error_t **arg4 = (tiledb_error_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = *(tiledb_error_t ***)&jarg4; 
  result = (int)tiledb_config_get(arg1,(char const *)arg2,(char const **)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1load_1from_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_error_t **arg3 = (tiledb_error_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_error_t ***)&jarg3; 
  result = (int)tiledb_config_load_from_file(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1unset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_error_t **arg3 = (tiledb_error_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_error_t ***)&jarg3; 
  result = (int)tiledb_config_unset(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1save_1to_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_error_t **arg3 = (tiledb_error_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_error_t ***)&jarg3; 
  result = (int)tiledb_config_save_to_file(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1iter_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  tiledb_config_iter_t **arg2 = (tiledb_config_iter_t **) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_error_t **arg4 = (tiledb_error_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = *(tiledb_config_iter_t ***)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_error_t ***)&jarg4; 
  result = (int)tiledb_config_iter_create(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1iter_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  result = (int)tiledb_config_iter_free(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1iter_1here(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  char **arg2 = (char **) 0 ;
  char **arg3 = (char **) 0 ;
  tiledb_error_t **arg4 = (tiledb_error_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  arg4 = *(tiledb_error_t ***)&jarg4; 
  result = (int)tiledb_config_iter_here(arg1,(char const **)arg2,(char const **)arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1iter_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  tiledb_error_t **arg2 = (tiledb_error_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  arg2 = *(tiledb_error_t ***)&jarg2; 
  result = (int)tiledb_config_iter_next(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1config_1iter_1done(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  int *arg2 = (int *) 0 ;
  tiledb_error_t **arg3 = (tiledb_error_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = *(tiledb_error_t ***)&jarg3; 
  result = (int)tiledb_config_iter_done(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t **arg1 = (tiledb_ctx_t **) 0 ;
  tiledb_config_t *arg2 = (tiledb_config_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t ***)&jarg1; 
  arg2 = *(tiledb_config_t **)&jarg2; 
  result = (int)tiledb_ctx_create(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  result = (int)tiledb_ctx_free(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1get_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_config_t **arg2 = (tiledb_config_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_config_t ***)&jarg2; 
  result = (int)tiledb_ctx_get_config(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1get_1last_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_error_t **arg2 = (tiledb_error_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_error_t ***)&jarg2; 
  result = (int)tiledb_ctx_get_last_error(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ctx_1is_1supported_1fs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_filesystem_t arg2 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = (tiledb_filesystem_t)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (int)tiledb_ctx_is_supported_fs(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1group_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)tiledb_group_create(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t **arg2 = (tiledb_attribute_t **) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_datatype_t arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t ***)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (tiledb_datatype_t)jarg4; 
  result = (int)tiledb_attribute_create(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  result = (int)tiledb_attribute_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1set_1compressor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  tiledb_compressor_t arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = (tiledb_compressor_t)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)tiledb_attribute_set_compressor(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1set_1cell_1val_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)tiledb_attribute_set_cell_val_num(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  char **arg3 = (char **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  result = (int)tiledb_attribute_get_name(arg1,(tiledb_attribute_t const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  tiledb_datatype_t *arg3 = (tiledb_datatype_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(tiledb_datatype_t **)&jarg3; 
  result = (int)tiledb_attribute_get_type(arg1,(tiledb_attribute_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1get_1compressor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  tiledb_compressor_t *arg3 = (tiledb_compressor_t *) 0 ;
  int *arg4 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(tiledb_compressor_t **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (int)tiledb_attribute_get_compressor(arg1,(tiledb_attribute_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1get_1cell_1val_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (int)tiledb_attribute_get_cell_val_num(arg1,(tiledb_attribute_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1get_1cell_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (int)tiledb_attribute_get_cell_size(arg1,(tiledb_attribute_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (int)tiledb_attribute_dump(arg1,(tiledb_attribute_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t **arg2 = (tiledb_domain_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t ***)&jarg2; 
  result = (int)tiledb_domain_create(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  result = (int)tiledb_domain_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  tiledb_datatype_t *arg3 = (tiledb_datatype_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = *(tiledb_datatype_t **)&jarg3; 
  result = (int)tiledb_domain_get_type(arg1,(tiledb_domain_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1get_1rank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (int)tiledb_domain_get_rank(arg1,(tiledb_domain_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1add_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  tiledb_dimension_t *arg3 = (tiledb_dimension_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = *(tiledb_dimension_t **)&jarg3; 
  result = (int)tiledb_domain_add_dimension(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1get_1dimension_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  unsigned int arg3 ;
  tiledb_dimension_t **arg4 = (tiledb_dimension_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(tiledb_dimension_t ***)&jarg4; 
  result = (int)tiledb_domain_get_dimension_from_index(arg1,(tiledb_domain_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1get_1dimension_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_dimension_t **arg4 = (tiledb_dimension_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_dimension_t ***)&jarg4; 
  result = (int)tiledb_domain_get_dimension_from_name(arg1,(tiledb_domain_t const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (int)tiledb_domain_dump(arg1,(tiledb_domain_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t **arg2 = (tiledb_dimension_t **) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_datatype_t arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t ***)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (tiledb_datatype_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int)tiledb_dimension_create(arg1,arg2,(char const *)arg3,arg4,(void const *)arg5,(void const *)arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  result = (int)tiledb_dimension_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  char **arg3 = (char **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  result = (int)tiledb_dimension_get_name(arg1,(tiledb_dimension_t const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  tiledb_datatype_t *arg3 = (tiledb_datatype_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(tiledb_datatype_t **)&jarg3; 
  result = (int)tiledb_dimension_get_type(arg1,(tiledb_dimension_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1get_1domain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  void **arg3 = (void **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(void ***)&jarg3; 
  result = (int)tiledb_dimension_get_domain(arg1,(tiledb_dimension_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1get_1tile_1extent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  void **arg3 = (void **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(void ***)&jarg3; 
  result = (int)tiledb_dimension_get_tile_extent(arg1,(tiledb_dimension_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (int)tiledb_dimension_dump(arg1,(tiledb_dimension_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t **arg2 = (tiledb_array_schema_t **) 0 ;
  tiledb_array_type_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t ***)&jarg2; 
  arg3 = (tiledb_array_type_t)jarg3; 
  result = (int)tiledb_array_schema_create(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  result = (int)tiledb_array_schema_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1add_1attribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_attribute_t *arg3 = (tiledb_attribute_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_attribute_t **)&jarg3; 
  result = (int)tiledb_array_schema_add_attribute(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1set_1domain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_domain_t *arg3 = (tiledb_domain_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_domain_t **)&jarg3; 
  result = (int)tiledb_array_schema_set_domain(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1set_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  uint64_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int)tiledb_array_schema_set_capacity(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1set_1cell_1order(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_layout_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (tiledb_layout_t)jarg3; 
  result = (int)tiledb_array_schema_set_cell_order(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1set_1tile_1order(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_layout_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (tiledb_layout_t)jarg3; 
  result = (int)tiledb_array_schema_set_tile_order(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1set_1coords_1compressor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_compressor_t arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (tiledb_compressor_t)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)tiledb_array_schema_set_coords_compressor(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1set_1offsets_1compressor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_compressor_t arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (tiledb_compressor_t)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)tiledb_array_schema_set_offsets_compressor(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  result = (int)tiledb_array_schema_check(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t **arg2 = (tiledb_array_schema_t **) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t ***)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_array_schema_load(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1array_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_array_type_t *arg3 = (tiledb_array_type_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_array_type_t **)&jarg3; 
  result = (int)tiledb_array_schema_get_array_type(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (int)tiledb_array_schema_get_capacity(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1cell_1order(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_layout_t *arg3 = (tiledb_layout_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_layout_t **)&jarg3; 
  result = (int)tiledb_array_schema_get_cell_order(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1coords_1compressor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_compressor_t *arg3 = (tiledb_compressor_t *) 0 ;
  int *arg4 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_compressor_t **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (int)tiledb_array_schema_get_coords_compressor(arg1,(tiledb_array_schema_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1offsets_1compressor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_compressor_t *arg3 = (tiledb_compressor_t *) 0 ;
  int *arg4 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_compressor_t **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (int)tiledb_array_schema_get_offsets_compressor(arg1,(tiledb_array_schema_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1domain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_domain_t **arg3 = (tiledb_domain_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_domain_t ***)&jarg3; 
  result = (int)tiledb_array_schema_get_domain(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1tile_1order(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_layout_t *arg3 = (tiledb_layout_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_layout_t **)&jarg3; 
  result = (int)tiledb_array_schema_get_tile_order(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1attribute_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (int)tiledb_array_schema_get_attribute_num(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1attribute_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  unsigned int arg3 ;
  tiledb_attribute_t **arg4 = (tiledb_attribute_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(tiledb_attribute_t ***)&jarg4; 
  result = (int)tiledb_array_schema_get_attribute_from_index(arg1,(tiledb_array_schema_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1get_1attribute_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_attribute_t **arg4 = (tiledb_attribute_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_attribute_t ***)&jarg4; 
  result = (int)tiledb_array_schema_get_attribute_from_name(arg1,(tiledb_array_schema_t const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (int)tiledb_array_schema_dump(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t **arg2 = (tiledb_query_t **) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_query_type_t arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t ***)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (tiledb_query_type_t)jarg4; 
  result = (int)tiledb_query_create(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1set_1subarray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (int)tiledb_query_set_subarray(arg1,arg2,(void const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1set_1buffers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char **arg3 = (char **) 0 ;
  unsigned int arg4 ;
  void **arg5 = (void **) 0 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = *(void ***)&jarg5; 
  arg6 = *(uint64_t **)&jarg6; 
  result = (int)tiledb_query_set_buffers(arg1,arg2,(char const **)arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1set_1layout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_layout_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = (tiledb_layout_t)jarg3; 
  result = (int)tiledb_query_set_layout(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  result = (int)tiledb_query_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1submit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  result = (int)tiledb_query_submit(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1submit_1async(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  void (*arg3)(void *) = (void (*)(void *)) 0 ;
  void *arg4 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(void (**)(void *))&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (int)tiledb_query_submit_async(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1reset_1buffers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  void **arg3 = (void **) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(void ***)&jarg3; 
  arg4 = *(uint64_t **)&jarg4; 
  result = (int)tiledb_query_reset_buffers(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1get_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_query_status_t *arg3 = (tiledb_query_status_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(tiledb_query_status_t **)&jarg3; 
  result = (int)tiledb_query_get_status(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1get_1attribute_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_query_status_t *arg4 = (tiledb_query_status_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_query_status_t **)&jarg4; 
  result = (int)tiledb_query_get_attribute_status(arg1,(tiledb_query_t const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_array_schema_t *arg3 = (tiledb_array_schema_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_array_schema_t **)&jarg3; 
  result = (int)tiledb_array_create(arg1,(char const *)arg2,(tiledb_array_schema_t const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1consolidate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)tiledb_array_consolidate(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1get_1non_1empty_1domain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  int *arg4 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(void **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (int)tiledb_array_get_non_empty_domain(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1compute_1max_1read_1buffer_1sizes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  char **arg4 = (char **) 0 ;
  unsigned int arg5 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(void **)&jarg3; 
  arg4 = *(char ***)&jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = *(uint64_t **)&jarg6; 
  result = (int)tiledb_array_compute_max_read_buffer_sizes(arg1,(char const *)arg2,(void const *)arg3,(char const **)arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1object_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_object_t *arg3 = (tiledb_object_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_object_t **)&jarg3; 
  result = (int)tiledb_object_type(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1object_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)tiledb_object_remove(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1object_1move(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (int)tiledb_object_move(arg1,(char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1object_1walk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_walk_order_t arg3 ;
  int (*arg4)(char const *,tiledb_object_t,void *) = (int (*)(char const *,tiledb_object_t,void *)) 0 ;
  void *arg5 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (tiledb_walk_order_t)jarg3; 
  arg4 = *(int (**)(char const *,tiledb_object_t,void *))&jarg4; 
  arg5 = *(void **)&jarg5; 
  result = (int)tiledb_object_walk(arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1ls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int (*arg3)(char const *,tiledb_object_t,void *) = (int (*)(char const *,tiledb_object_t,void *)) 0 ;
  void *arg4 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(int (**)(char const *,tiledb_object_t,void *))&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (int)tiledb_ls(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_schema_t **arg2 = (tiledb_kv_schema_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_schema_t ***)&jarg2; 
  result = (int)tiledb_kv_schema_create(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_schema_t *arg2 = (tiledb_kv_schema_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_schema_t **)&jarg2; 
  result = (int)tiledb_kv_schema_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1add_1attribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_schema_t *arg2 = (tiledb_kv_schema_t *) 0 ;
  tiledb_attribute_t *arg3 = (tiledb_attribute_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_schema_t **)&jarg2; 
  arg3 = *(tiledb_attribute_t **)&jarg3; 
  result = (int)tiledb_kv_schema_add_attribute(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_schema_t *arg2 = (tiledb_kv_schema_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_schema_t **)&jarg2; 
  result = (int)tiledb_kv_schema_check(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_schema_t **arg2 = (tiledb_kv_schema_t **) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_schema_t ***)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_kv_schema_load(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1get_1attribute_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_schema_t *arg2 = (tiledb_kv_schema_t *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_schema_t **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (int)tiledb_kv_schema_get_attribute_num(arg1,(tiledb_kv_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1get_1attribute_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_schema_t *arg2 = (tiledb_kv_schema_t *) 0 ;
  unsigned int arg3 ;
  tiledb_attribute_t **arg4 = (tiledb_attribute_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_schema_t **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(tiledb_attribute_t ***)&jarg4; 
  result = (int)tiledb_kv_schema_get_attribute_from_index(arg1,(tiledb_kv_schema_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1get_1attribute_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_schema_t *arg2 = (tiledb_kv_schema_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_attribute_t **arg4 = (tiledb_attribute_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_schema_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_attribute_t ***)&jarg4; 
  result = (int)tiledb_kv_schema_get_attribute_from_name(arg1,(tiledb_kv_schema_t const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_schema_t *arg2 = (tiledb_kv_schema_t *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_schema_t **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (int)tiledb_kv_schema_dump(arg1,(tiledb_kv_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1item_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_item_t **arg2 = (tiledb_kv_item_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_item_t ***)&jarg2; 
  result = (int)tiledb_kv_item_create(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1item_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_item_t *arg2 = (tiledb_kv_item_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_item_t **)&jarg2; 
  result = (int)tiledb_kv_item_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1item_1set_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4, jobject jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_item_t *arg2 = (tiledb_kv_item_t *) 0 ;
  void *arg3 = (void *) 0 ;
  tiledb_datatype_t arg4 ;
  uint64_t arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_item_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (tiledb_datatype_t)jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int)tiledb_kv_item_set_key(arg1,arg2,(void const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1item_1set_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jint jarg5, jobject jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_item_t *arg2 = (tiledb_kv_item_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  tiledb_datatype_t arg5 ;
  uint64_t arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_item_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void **)&jarg4; 
  arg5 = (tiledb_datatype_t)jarg5; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg6);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg6, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg6 = 0;
    if (sz > 0) {
      arg6 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg6 = (arg6 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int)tiledb_kv_item_set_value(arg1,arg2,(char const *)arg3,(void const *)arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1item_1get_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_item_t *arg2 = (tiledb_kv_item_t *) 0 ;
  void **arg3 = (void **) 0 ;
  tiledb_datatype_t *arg4 = (tiledb_datatype_t *) 0 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_item_t **)&jarg2; 
  arg3 = *(void ***)&jarg3; 
  arg4 = *(tiledb_datatype_t **)&jarg4; 
  arg5 = *(uint64_t **)&jarg5; 
  result = (int)tiledb_kv_item_get_key(arg1,arg2,(void const **)arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1item_1get_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_item_t *arg2 = (tiledb_kv_item_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void **arg4 = (void **) 0 ;
  tiledb_datatype_t *arg5 = (tiledb_datatype_t *) 0 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_item_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void ***)&jarg4; 
  arg5 = *(tiledb_datatype_t **)&jarg5; 
  arg6 = *(uint64_t **)&jarg6; 
  result = (int)tiledb_kv_item_get_value(arg1,arg2,(char const *)arg3,(void const **)arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_kv_schema_t *arg3 = (tiledb_kv_schema_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_kv_schema_t **)&jarg3; 
  result = (int)tiledb_kv_create(arg1,(char const *)arg2,(tiledb_kv_schema_t const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1consolidate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)tiledb_kv_consolidate(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1set_1max_1items(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  uint64_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int)tiledb_kv_set_max_items(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t **arg2 = (tiledb_kv_t **) 0 ;
  char *arg3 = (char *) 0 ;
  char **arg4 = (char **) 0 ;
  unsigned int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t ***)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(char ***)&jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (int)tiledb_kv_open(arg1,arg2,(char const *)arg3,(char const **)arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  result = (int)tiledb_kv_close(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1add_1item(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  tiledb_kv_item_t *arg3 = (tiledb_kv_item_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  arg3 = *(tiledb_kv_item_t **)&jarg3; 
  result = (int)tiledb_kv_add_item(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1flush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  result = (int)tiledb_kv_flush(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1get_1item(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5, jobject jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_t *arg2 = (tiledb_kv_t *) 0 ;
  tiledb_kv_item_t **arg3 = (tiledb_kv_item_t **) 0 ;
  void *arg4 = (void *) 0 ;
  tiledb_datatype_t arg5 ;
  uint64_t arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_t **)&jarg2; 
  arg3 = *(tiledb_kv_item_t ***)&jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = (tiledb_datatype_t)jarg5; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg6);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg6, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg6 = 0;
    if (sz > 0) {
      arg6 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg6 = (arg6 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int)tiledb_kv_get_item(arg1,arg2,arg3,(void const *)arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1iter_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_iter_t **arg2 = (tiledb_kv_iter_t **) 0 ;
  char *arg3 = (char *) 0 ;
  char **arg4 = (char **) 0 ;
  unsigned int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_iter_t ***)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(char ***)&jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (int)tiledb_kv_iter_create(arg1,arg2,(char const *)arg3,(char const **)arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1iter_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_iter_t *arg2 = (tiledb_kv_iter_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_iter_t **)&jarg2; 
  result = (int)tiledb_kv_iter_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1iter_1here(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_iter_t *arg2 = (tiledb_kv_iter_t *) 0 ;
  tiledb_kv_item_t **arg3 = (tiledb_kv_item_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_iter_t **)&jarg2; 
  arg3 = *(tiledb_kv_item_t ***)&jarg3; 
  result = (int)tiledb_kv_iter_here(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1iter_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_iter_t *arg2 = (tiledb_kv_iter_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_iter_t **)&jarg2; 
  result = (int)tiledb_kv_iter_next(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1iter_1done(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_iter_t *arg2 = (tiledb_kv_iter_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_iter_t **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (int)tiledb_kv_iter_done(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t **arg2 = (tiledb_vfs_t **) 0 ;
  tiledb_config_t *arg3 = (tiledb_config_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t ***)&jarg2; 
  arg3 = *(tiledb_config_t **)&jarg3; 
  result = (int)tiledb_vfs_create(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  result = (int)tiledb_vfs_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1create_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_vfs_create_bucket(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1remove_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_vfs_remove_bucket(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1empty_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_vfs_empty_bucket(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1is_1empty_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(int **)&jarg4; 
  result = (int)tiledb_vfs_is_empty_bucket(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1is_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(int **)&jarg4; 
  result = (int)tiledb_vfs_is_bucket(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1create_1dir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_vfs_create_dir(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1is_1dir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(int **)&jarg4; 
  result = (int)tiledb_vfs_is_dir(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1remove_1dir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_vfs_remove_dir(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1is_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(int **)&jarg4; 
  result = (int)tiledb_vfs_is_file(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1remove_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_vfs_remove_file(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1file_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint64_t **)&jarg4; 
  result = (int)tiledb_vfs_file_size(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1move(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  result = (int)tiledb_vfs_move(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_vfs_mode_t arg4 ;
  tiledb_vfs_fh_t **arg5 = (tiledb_vfs_fh_t **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (tiledb_vfs_mode_t)jarg4; 
  arg5 = *(tiledb_vfs_fh_t ***)&jarg5; 
  result = (int)tiledb_vfs_open(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_fh_t *arg2 = (tiledb_vfs_fh_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_fh_t **)&jarg2; 
  result = (int)tiledb_vfs_close(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jlong jarg4, jobject jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_fh_t *arg2 = (tiledb_vfs_fh_t *) 0 ;
  uint64_t arg3 ;
  void *arg4 = (void *) 0 ;
  uint64_t arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_fh_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(void **)&jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int)tiledb_vfs_read(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_fh_t *arg2 = (tiledb_vfs_fh_t *) 0 ;
  void *arg3 = (void *) 0 ;
  uint64_t arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_fh_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int)tiledb_vfs_write(arg1,arg2,(void const *)arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1sync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_fh_t *arg2 = (tiledb_vfs_fh_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_fh_t **)&jarg2; 
  result = (int)tiledb_vfs_sync(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1fh_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_fh_t *arg2 = (tiledb_vfs_fh_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_fh_t **)&jarg2; 
  result = (int)tiledb_vfs_fh_free(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1fh_1is_1closed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_fh_t *arg2 = (tiledb_vfs_fh_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_fh_t **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (int)tiledb_vfs_fh_is_closed(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1vfs_1touch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_vfs_touch(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1uri_1to_1path(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(unsigned int **)&jarg4; 
  result = (int)tiledb_uri_to_path(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1dimension_1dump_1stdout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  result = (int)tiledb_dimension_dump_stdout(arg1,(tiledb_dimension_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1kv_1schema_1dump_1stdout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_kv_schema_t *arg2 = (tiledb_kv_schema_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_kv_schema_t **)&jarg2; 
  result = (int)tiledb_kv_schema_dump_stdout(arg1,(tiledb_kv_schema_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1attribute_1dump_1stdout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  result = (int)tiledb_attribute_dump_stdout(arg1,(tiledb_attribute_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1domain_1dump_1stdout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  result = (int)tiledb_domain_dump_stdout(arg1,(tiledb_domain_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1array_1schema_1dump_1stdout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  result = (int)tiledb_array_schema_dump_stdout(arg1,(tiledb_array_schema_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_derefVoid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void **arg1 = (void **) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ***)&jarg1; 
  result = (void *)derefVoid(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_api_tiledbJNI_print_1upon_1completion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  print_upon_completion(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_print_1path(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_object_t arg2 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (tiledb_object_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (int)print_path((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_native_1callback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  void (*result)(void *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (void (*)(void *))native_callback();
  *(void (**)(void *))&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_native_1walk_1callback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int (*result)(char const *,tiledb_object_t,void *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int (*)(char const *,tiledb_object_t,void *))native_walk_callback();
  *(int (**)(char const *,tiledb_object_t,void *))&jresult = result; 
  return jresult;
}

struct Callback {
   jobject obj;
   jclass cls;
};

SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1query_1submit_1async_1jc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  void (*arg3)(void *) = (void (*)(void *)) 0 ;
  jobject arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(void (**)(void *))&jarg3; 
  arg4 = jarg4;
  struct Callback* callback = new Callback;
  callback->obj=jenv->NewGlobalRef(arg4);
  callback->cls=jenv->GetObjectClass(arg4);
  result = (int)tiledb_query_submit_async(arg1,arg2,arg3,(void *) callback);
  jresult = (jint)result; 
  return jresult;
}

SWIGEXPORT jint JNICALL Java_io_tiledb_api_tiledbJNI_tiledb_1object_1walk_1jc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_walk_order_t arg3 ;
  int (*arg4)(char const *,tiledb_object_t,void *) = (int (*)(char const *,tiledb_object_t,void *)) 0 ;
  void *arg5 = (void *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_ctx_t **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (tiledb_walk_order_t)jarg3;
  arg4 = *(int (**)(char const *,tiledb_object_t,void *))&jarg4;
  struct Callback* callback = new Callback;
  callback->obj=jenv->NewGlobalRef(jarg5);
  callback->cls=jenv->GetObjectClass(jarg5);
  result = (int)tiledb_object_walk(arg1,(char const *)arg2,arg3,arg4,(void *) callback);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}



JNIEnv* getJNI(){
  JavaVM* vm;
  jsize vmCount;
  if (JNI_GetCreatedJavaVMs(&vm, 1, &vmCount) != JNI_OK || vmCount == 0) {
      fprintf(stderr, "Could not get active VM\n");
      return NULL;
  }

  JNIEnv* env;
  jint result = vm->GetEnv((void**)&env, JNI_VERSION_1_6);
  if (result == JNI_EDETACHED) {
      result = vm->AttachCurrentThread((void**)&env, NULL);
  }
  if (result != JNI_OK) {
      fprintf(stderr, "Failed to get JNIEnv\n");
      return NULL;
  }
  return env;
}

void java_callback(void* data) {
  JNIEnv* jenv = getJNI();
  jobject obj = ((Callback*)data)->obj;
  jclass cls = ((Callback*)data)->cls;
  jmethodID mid = jenv->GetMethodID(cls, "call", "()V");
  if (mid == 0)
    return;
  jenv->CallVoidMethod(obj, mid);
  //vm->DetachCurrentThread();
}

int java_path_callback(const char* path, tiledb_object_t type, void* data) {
  JNIEnv* jenv = getJNI();
  jobject obj = ((Callback*)data)->obj;
  jclass cls = ((Callback*)data)->cls;
  jmethodID mid = jenv->GetMethodID(cls, "call", "(JI)I");
  if (mid == 0)
    return -1;
  jlong jpath;
  *(const char **)&jpath = path;
  jint ret = jenv->CallIntMethod(obj, mid, jpath, (jint) type);
  //vm->DetachCurrentThread();
  return ret;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_java_1callback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  void (*result)(void *) = 0 ;

  (void)jenv;
  (void)jcls;
  result = (void (*)(void *))java_callback;
  *(void (**)(void *))&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_api_tiledbJNI_java_1path_1callback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int (*result)(char const *,tiledb_object_t,void *) = 0 ;

  (void)jenv;
  (void)jcls;
  result = (int (*)(const char* , tiledb_object_t, void *))java_path_callback;
  *(int (**)(const char* , tiledb_object_t, void *))&jresult = result;
  return jresult;
}

#ifdef __cplusplus
}
#endif

